{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/server-cli.ts","server-cli.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,uBAAuB,CAAC,CAAC,iEAAiE;AACjG,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,EAAE,6BAA6B,EAAE,MAAM,qBAAqB,CAAC;AACpE,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,uBAAuB,EAAE,MAAM,uBAAuB,CAAC;AAChE,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAE9C,MAAM,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAE1D,MAAM;AACN,MAAM,gBAAgB,GAAG,MAAM,uBAAuB,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC,CAAC;AACnK,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,uDAAuD;AAE5H,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;IAC/B,sFAAsF;IACtF,kDAAkD;IAClD,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;IACvK,6BAA6B,CAAC,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,CAAC;AACzF,CAAC;KAAM,CAAC;IACP,OAAO,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;AACjE,CAAC;AAED,gBAAgB;AAChB,MAAM,YAAY,EAAE,CAAC;AAErB,cAAc;AACd,MAAM,MAAM,CAAC,gCAAgC,CAAC,CAAC","file":"server-cli.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport './bootstrap-server.js'; // this MUST come before other imports as it changes global state\r\nimport { dirname, join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport { devInjectNodeModuleLookupPath } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\r\nimport { product } from './bootstrap-meta.js';\r\n\r\nconst __dirname = dirname(fileURLToPath(import.meta.url));\r\n\r\n// NLS\r\nconst nlsConfiguration = await resolveNLSConfiguration({ userLocale: 'en', osLocale: 'en', commit: product.commit, userDataPath: '', nlsMetadataPath: __dirname });\r\nprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfiguration); // required for `bootstrap-esm` to pick up NLS messages\r\n\r\nif (process.env['VSCODE_DEV']) {\r\n\t// When running out of sources, we need to load node modules from remote/node_modules,\r\n\t// which are compiled against nodejs, not electron\r\n\tprocess.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] || join(__dirname, '..', 'remote', 'node_modules');\r\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\r\n} else {\r\n\tdelete process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'];\r\n}\r\n\r\n// Bootstrap ESM\r\nawait bootstrapESM();\r\n\r\n// Load Server\r\nawait import('./vs/server/node/server.cli.js');\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport './bootstrap-server.js'; // this MUST come before other imports as it changes global state\r\nimport { dirname, join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport { devInjectNodeModuleLookupPath } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\r\nimport { product } from './bootstrap-meta.js';\r\n\r\nconst __dirname = dirname(fileURLToPath(import.meta.url));\r\n\r\n// NLS\r\nconst nlsConfiguration = await resolveNLSConfiguration({ userLocale: 'en', osLocale: 'en', commit: product.commit, userDataPath: '', nlsMetadataPath: __dirname });\r\nprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfiguration); // required for `bootstrap-esm` to pick up NLS messages\r\n\r\nif (process.env['VSCODE_DEV']) {\r\n\t// When running out of sources, we need to load node modules from remote/node_modules,\r\n\t// which are compiled against nodejs, not electron\r\n\tprocess.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] || join(__dirname, '..', 'remote', 'node_modules');\r\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\r\n} else {\r\n\tdelete process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'];\r\n}\r\n\r\n// Bootstrap ESM\r\nawait bootstrapESM();\r\n\r\n// Load Server\r\nawait import('./vs/server/node/server.cli.js');\r\n"]}