{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/bootstrap-esm.ts","bootstrap-esm.ts"],"names":[],"mappings":"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","file":"bootstrap-esm.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { fileURLToPath } from 'url';\r\nimport { createRequire, register } from 'node:module';\r\nimport { product, pkg } from './bootstrap-meta.js';\r\nimport './bootstrap-node.js';\r\nimport * as performance from './vs/base/common/performance.js';\r\nimport { INLSConfiguration } from './vs/nls.js';\r\n\r\nconst require = createRequire(import.meta.url);\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\n// Install a hook to module resolution to map 'fs' to 'original-fs'\r\nif (process.env['ELECTRON_RUN_AS_NODE'] || process.versions['electron']) {\r\n\tconst jsCode = `\r\n\texport async function resolve(specifier, context, nextResolve) {\r\n\t\tif (specifier === 'fs') {\r\n\t\t\treturn {\r\n\t\t\t\tformat: 'builtin',\r\n\t\t\t\tshortCircuit: true,\r\n\t\t\t\turl: 'node:original-fs'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Defer to the next hook in the chain, which would be the\r\n\t\t// Node.js default resolve if this is the last user-specified loader.\r\n\t\treturn nextResolve(specifier, context);\r\n\t}`;\r\n\tregister(`data:text/javascript;base64,${Buffer.from(jsCode).toString('base64')}`, import.meta.url);\r\n}\r\n\r\n// Prepare globals that are needed for running\r\nglobalThis._VSCODE_PRODUCT_JSON = { ...product };\r\nif (process.env['VSCODE_DEV']) {\r\n\ttry {\r\n\t\tconst overrides: unknown = require('../product.overrides.json');\r\n\t\tglobalThis._VSCODE_PRODUCT_JSON = Object.assign(globalThis._VSCODE_PRODUCT_JSON, overrides);\r\n\t} catch (error) { /* ignore */ }\r\n}\r\nglobalThis._VSCODE_PACKAGE_JSON = { ...pkg };\r\nglobalThis._VSCODE_FILE_ROOT = __dirname;\r\n\r\n//#region NLS helpers\r\n\r\nlet setupNLSResult: Promise<INLSConfiguration | undefined> | undefined = undefined;\r\n\r\nfunction setupNLS(): Promise<INLSConfiguration | undefined> {\r\n\tif (!setupNLSResult) {\r\n\t\tsetupNLSResult = doSetupNLS();\r\n\t}\r\n\r\n\treturn setupNLSResult;\r\n}\r\n\r\nasync function doSetupNLS(): Promise<INLSConfiguration | undefined> {\r\n\tperformance.mark('code/willLoadNls');\r\n\r\n\tlet nlsConfig: INLSConfiguration | undefined = undefined;\r\n\r\n\tlet messagesFile: string | undefined;\r\n\tif (process.env['VSCODE_NLS_CONFIG']) {\r\n\t\ttry {\r\n\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\r\n\t\t\tif (nlsConfig?.languagePack?.messagesFile) {\r\n\t\t\t\tmessagesFile = nlsConfig.languagePack.messagesFile;\r\n\t\t\t} else if (nlsConfig?.defaultMessagesFile) {\r\n\t\t\t\tmessagesFile = nlsConfig.defaultMessagesFile;\r\n\t\t\t}\r\n\r\n\t\t\tglobalThis._VSCODE_NLS_LANGUAGE = nlsConfig?.resolvedLanguage;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(`Error reading VSCODE_NLS_CONFIG from environment: ${e}`);\r\n\t\t}\r\n\t}\r\n\r\n\tif (\r\n\t\tprocess.env['VSCODE_DEV'] ||\t// no NLS support in dev mode\r\n\t\t!messagesFile\t\t\t\t\t// no NLS messages file\r\n\t) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\ttry {\r\n\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(messagesFile)).toString());\r\n\t} catch (error) {\r\n\t\tconsole.error(`Error reading NLS messages file ${messagesFile}: ${error}`);\r\n\r\n\t\t// Mark as corrupt: this will re-create the language pack cache next startup\r\n\t\tif (nlsConfig?.languagePack?.corruptMarkerFile) {\r\n\t\t\ttry {\r\n\t\t\t\tawait fs.promises.writeFile(nlsConfig.languagePack.corruptMarkerFile, 'corrupted');\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error writing corrupted NLS marker file: ${error}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fallback to the default message file to ensure english translation at least\r\n\t\tif (nlsConfig?.defaultMessagesFile && nlsConfig.defaultMessagesFile !== messagesFile) {\r\n\t\t\ttry {\r\n\t\t\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(nlsConfig.defaultMessagesFile)).toString());\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error reading default NLS messages file ${nlsConfig.defaultMessagesFile}: ${error}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tperformance.mark('code/didLoadNls');\r\n\r\n\treturn nlsConfig;\r\n}\r\n\r\n//#endregion\r\n\r\nexport async function bootstrapESM(): Promise<void> {\r\n\r\n\t// NLS\r\n\tawait setupNLS();\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { fileURLToPath } from 'url';\r\nimport { createRequire, register } from 'node:module';\r\nimport { product, pkg } from './bootstrap-meta.js';\r\nimport './bootstrap-node.js';\r\nimport * as performance from './vs/base/common/performance.js';\r\nimport { INLSConfiguration } from './vs/nls.js';\r\n\r\nconst require = createRequire(import.meta.url);\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\n// Install a hook to module resolution to map 'fs' to 'original-fs'\r\nif (process.env['ELECTRON_RUN_AS_NODE'] || process.versions['electron']) {\r\n\tconst jsCode = `\r\n\texport async function resolve(specifier, context, nextResolve) {\r\n\t\tif (specifier === 'fs') {\r\n\t\t\treturn {\r\n\t\t\t\tformat: 'builtin',\r\n\t\t\t\tshortCircuit: true,\r\n\t\t\t\turl: 'node:original-fs'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Defer to the next hook in the chain, which would be the\r\n\t\t// Node.js default resolve if this is the last user-specified loader.\r\n\t\treturn nextResolve(specifier, context);\r\n\t}`;\r\n\tregister(`data:text/javascript;base64,${Buffer.from(jsCode).toString('base64')}`, import.meta.url);\r\n}\r\n\r\n// Prepare globals that are needed for running\r\nglobalThis._VSCODE_PRODUCT_JSON = { ...product };\r\nif (process.env['VSCODE_DEV']) {\r\n\ttry {\r\n\t\tconst overrides: unknown = require('../product.overrides.json');\r\n\t\tglobalThis._VSCODE_PRODUCT_JSON = Object.assign(globalThis._VSCODE_PRODUCT_JSON, overrides);\r\n\t} catch (error) { /* ignore */ }\r\n}\r\nglobalThis._VSCODE_PACKAGE_JSON = { ...pkg };\r\nglobalThis._VSCODE_FILE_ROOT = __dirname;\r\n\r\n//#region NLS helpers\r\n\r\nlet setupNLSResult: Promise<INLSConfiguration | undefined> | undefined = undefined;\r\n\r\nfunction setupNLS(): Promise<INLSConfiguration | undefined> {\r\n\tif (!setupNLSResult) {\r\n\t\tsetupNLSResult = doSetupNLS();\r\n\t}\r\n\r\n\treturn setupNLSResult;\r\n}\r\n\r\nasync function doSetupNLS(): Promise<INLSConfiguration | undefined> {\r\n\tperformance.mark('code/willLoadNls');\r\n\r\n\tlet nlsConfig: INLSConfiguration | undefined = undefined;\r\n\r\n\tlet messagesFile: string | undefined;\r\n\tif (process.env['VSCODE_NLS_CONFIG']) {\r\n\t\ttry {\r\n\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\r\n\t\t\tif (nlsConfig?.languagePack?.messagesFile) {\r\n\t\t\t\tmessagesFile = nlsConfig.languagePack.messagesFile;\r\n\t\t\t} else if (nlsConfig?.defaultMessagesFile) {\r\n\t\t\t\tmessagesFile = nlsConfig.defaultMessagesFile;\r\n\t\t\t}\r\n\r\n\t\t\tglobalThis._VSCODE_NLS_LANGUAGE = nlsConfig?.resolvedLanguage;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(`Error reading VSCODE_NLS_CONFIG from environment: ${e}`);\r\n\t\t}\r\n\t}\r\n\r\n\tif (\r\n\t\tprocess.env['VSCODE_DEV'] ||\t// no NLS support in dev mode\r\n\t\t!messagesFile\t\t\t\t\t// no NLS messages file\r\n\t) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\ttry {\r\n\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(messagesFile)).toString());\r\n\t} catch (error) {\r\n\t\tconsole.error(`Error reading NLS messages file ${messagesFile}: ${error}`);\r\n\r\n\t\t// Mark as corrupt: this will re-create the language pack cache next startup\r\n\t\tif (nlsConfig?.languagePack?.corruptMarkerFile) {\r\n\t\t\ttry {\r\n\t\t\t\tawait fs.promises.writeFile(nlsConfig.languagePack.corruptMarkerFile, 'corrupted');\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error writing corrupted NLS marker file: ${error}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fallback to the default message file to ensure english translation at least\r\n\t\tif (nlsConfig?.defaultMessagesFile && nlsConfig.defaultMessagesFile !== messagesFile) {\r\n\t\t\ttry {\r\n\t\t\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(nlsConfig.defaultMessagesFile)).toString());\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error reading default NLS messages file ${nlsConfig.defaultMessagesFile}: ${error}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tperformance.mark('code/didLoadNls');\r\n\r\n\treturn nlsConfig;\r\n}\r\n\r\n//#endregion\r\n\r\nexport async function bootstrapESM(): Promise<void> {\r\n\r\n\t// NLS\r\n\tawait setupNLS();\r\n}\r\n"]}