{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/main.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'original-fs';\r\nimport * as os from 'os';\r\nimport { performance } from 'perf_hooks';\r\nimport { configurePortable } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\nimport { fileURLToPath } from 'url';\r\nimport { app, protocol, crashReporter, Menu, contentTracing } from 'electron';\r\nimport minimist from 'minimist';\r\nimport { product } from './bootstrap-meta.js';\r\nimport { parse } from './vs/base/common/jsonc.js';\r\nimport { getUserDataPath } from './vs/platform/environment/node/userDataPath.js';\r\nimport * as perf from './vs/base/common/performance.js';\r\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\r\nimport { getUNCHost, addUNCHostToAllowlist } from './vs/base/node/unc.js';\r\nimport { INLSConfiguration } from './vs/nls.js';\r\nimport { NativeParsedArgs } from './vs/platform/environment/common/argv.js';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nperf.mark('code/didStartMain');\r\n\r\nperf.mark('code/willLoadMainBundle', {\r\n\t// When built, the main bundle is a single JS file with all\r\n\t// dependencies inlined. As such, we mark `willLoadMainBundle`\r\n\t// as the start of the main bundle loading process.\r\n\tstartTime: Math.floor(performance.timeOrigin)\r\n});\r\nperf.mark('code/didLoadMainBundle');\r\n\r\n// Enable portable support\r\nconst portable = configurePortable(product);\r\n\r\nconst args = parseCLIArgs();\r\n// Configure static command line arguments\r\nconst argvConfig = configureCommandlineSwitchesSync(args);\r\n// Enable sandbox globally unless\r\n// 1) disabled via command line using either\r\n//    `--no-sandbox` or `--disable-chromium-sandbox` argument.\r\n// 2) argv.json contains `disable-chromium-sandbox: true`.\r\nif (args['sandbox'] &&\r\n\t!args['disable-chromium-sandbox'] &&\r\n\t!argvConfig['disable-chromium-sandbox']) {\r\n\tapp.enableSandbox();\r\n} else if (app.commandLine.hasSwitch('no-sandbox') &&\r\n\t!app.commandLine.hasSwitch('disable-gpu-sandbox')) {\r\n\t// Disable GPU sandbox whenever --no-sandbox is used.\r\n\tapp.commandLine.appendSwitch('disable-gpu-sandbox');\r\n} else {\r\n\tapp.commandLine.appendSwitch('no-sandbox');\r\n\tapp.commandLine.appendSwitch('disable-gpu-sandbox');\r\n}\r\n\r\n// Set userData path before app 'ready' event\r\nconst userDataPath = getUserDataPath(args, product.nameShort ?? 'code-oss-dev');\r\nif (process.platform === 'win32') {\r\n\tconst userDataUNCHost = getUNCHost(userDataPath);\r\n\tif (userDataUNCHost) {\r\n\t\taddUNCHostToAllowlist(userDataUNCHost); // enables to use UNC paths in userDataPath\r\n\t}\r\n}\r\napp.setPath('userData', userDataPath);\r\n\r\n// Resolve code cache path\r\nconst codeCachePath = getCodeCachePath();\r\n\r\n// Disable default menu (https://github.com/electron/electron/issues/35512)\r\nMenu.setApplicationMenu(null);\r\n\r\n// Configure crash reporter\r\nperf.mark('code/willStartCrashReporter');\r\n// If a crash-reporter-directory is specified we store the crash reports\r\n// in the specified directory and don't upload them to the crash server.\r\n//\r\n// Appcenter crash reporting is enabled if\r\n// * enable-crash-reporter runtime argument is set to 'true'\r\n// * --disable-crash-reporter command line parameter is not set\r\n//\r\n// Disable crash reporting in all other cases.\r\nif (args['crash-reporter-directory'] || (argvConfig['enable-crash-reporter'] && !args['disable-crash-reporter'])) {\r\n\tconfigureCrashReporter();\r\n}\r\nperf.mark('code/didStartCrashReporter');\r\n\r\n// Set logs path before app 'ready' event if running portable\r\n// to ensure that no 'logs' folder is created on disk at a\r\n// location outside of the portable directory\r\n// (https://github.com/microsoft/vscode/issues/56651)\r\nif (portable && portable.isPortable) {\r\n\tapp.setAppLogsPath(path.join(userDataPath, 'logs'));\r\n}\r\n\r\n// Register custom schemes with privileges\r\nprotocol.registerSchemesAsPrivileged([\r\n\t{\r\n\t\tscheme: 'vscode-webview',\r\n\t\tprivileges: { standard: true, secure: true, supportFetchAPI: true, corsEnabled: true, allowServiceWorkers: true, codeCache: true }\r\n\t},\r\n\t{\r\n\t\tscheme: 'vscode-file',\r\n\t\tprivileges: { secure: true, standard: true, supportFetchAPI: true, corsEnabled: true, codeCache: true }\r\n\t}\r\n]);\r\n\r\n// Global app listeners\r\nregisterListeners();\r\n\r\n/**\r\n * We can resolve the NLS configuration early if it is defined\r\n * in argv.json before `app.ready` event. Otherwise we can only\r\n * resolve NLS after `app.ready` event to resolve the OS locale.\r\n */\r\nlet nlsConfigurationPromise: Promise<INLSConfiguration> | undefined = undefined;\r\n\r\n// Use the most preferred OS language for language recommendation.\r\n// The API might return an empty array on Linux, such as when\r\n// the 'C' locale is the user's only configured locale.\r\n// No matter the OS, if the array is empty, default back to 'en'.\r\nconst osLocale = processZhLocale((app.getPreferredSystemLanguages()?.[0] ?? 'en').toLowerCase());\r\nconst userLocale = getUserDefinedLocale(argvConfig);\r\nif (userLocale) {\r\n\tnlsConfigurationPromise = resolveNLSConfiguration({\r\n\t\tuserLocale,\r\n\t\tosLocale,\r\n\t\tcommit: product.commit,\r\n\t\tuserDataPath,\r\n\t\tnlsMetadataPath: __dirname\r\n\t});\r\n}\r\n\r\n// Pass in the locale to Electron so that the\r\n// Windows Control Overlay is rendered correctly on Windows.\r\n// For now, don't pass in the locale on macOS due to\r\n// https://github.com/microsoft/vscode/issues/167543.\r\n// If the locale is `qps-ploc`, the Microsoft\r\n// Pseudo Language Language Pack is being used.\r\n// In that case, use `en` as the Electron locale.\r\n\r\nif (process.platform === 'win32' || process.platform === 'linux') {\r\n\tconst electronLocale = (!userLocale || userLocale === 'qps-ploc') ? 'en' : userLocale;\r\n\tapp.commandLine.appendSwitch('lang', electronLocale);\r\n}\r\n\r\n// Load our code once ready\r\napp.once('ready', function () {\r\n\tif (args['trace']) {\r\n\t\tlet traceOptions: Electron.TraceConfig | Electron.TraceCategoriesAndOptions;\r\n\t\tif (args['trace-memory-infra']) {\r\n\t\t\tconst customCategories = args['trace-category-filter']?.split(',') || [];\r\n\t\t\tcustomCategories.push('disabled-by-default-memory-infra', 'disabled-by-default-memory-infra.v8.code_stats');\r\n\t\t\ttraceOptions = {\r\n\t\t\t\tincluded_categories: customCategories,\r\n\t\t\t\texcluded_categories: ['*'],\r\n\t\t\t\tmemory_dump_config: {\r\n\t\t\t\t\tallowed_dump_modes: ['light', 'detailed'],\r\n\t\t\t\t\ttriggers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: 'periodic_interval',\r\n\t\t\t\t\t\t\tmode: 'detailed',\r\n\t\t\t\t\t\t\tmin_time_between_dumps_ms: 10000\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: 'periodic_interval',\r\n\t\t\t\t\t\t\tmode: 'light',\r\n\t\t\t\t\t\t\tmin_time_between_dumps_ms: 1000\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\ttraceOptions = {\r\n\t\t\t\tcategoryFilter: args['trace-category-filter'] || '*',\r\n\t\t\t\ttraceOptions: args['trace-options'] || 'record-until-full,enable-sampling'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcontentTracing.startRecording(traceOptions).finally(() => onReady());\r\n\t} else {\r\n\t\tonReady();\r\n\t}\r\n});\r\n\r\nasync function onReady() {\r\n\tperf.mark('code/mainAppReady');\r\n\r\n\ttry {\r\n\t\tconst [, nlsConfig] = await Promise.all([\r\n\t\t\tmkdirpIgnoreError(codeCachePath),\r\n\t\t\tresolveNlsConfiguration()\r\n\t\t]);\r\n\r\n\t\tawait startup(codeCachePath, nlsConfig);\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n}\r\n\r\n/**\r\n * Main startup routine\r\n */\r\nasync function startup(codeCachePath: string | undefined, nlsConfig: INLSConfiguration): Promise<void> {\r\n\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfig);\r\n\tprocess.env['VSCODE_CODE_CACHE_PATH'] = codeCachePath || '';\r\n\r\n\t// Bootstrap ESM\r\n\tawait bootstrapESM();\r\n\r\n\t// Load Main\r\n\tawait import('./vs/code/electron-main/main.js');\r\n\tperf.mark('code/didRunMainBundle');\r\n}\r\n\r\nfunction configureCommandlineSwitchesSync(cliArgs: NativeParsedArgs) {\r\n\tconst SUPPORTED_ELECTRON_SWITCHES = [\r\n\r\n\t\t// alias from us for --disable-gpu\r\n\t\t'disable-hardware-acceleration',\r\n\r\n\t\t// override for the color profile to use\r\n\t\t'force-color-profile',\r\n\r\n\t\t// disable LCD font rendering, a Chromium flag\r\n\t\t'disable-lcd-text',\r\n\r\n\t\t// bypass any specified proxy for the given semi-colon-separated list of hosts\r\n\t\t'proxy-bypass-list'\r\n\t];\r\n\r\n\tif (process.platform === 'linux') {\r\n\r\n\t\t// Force enable screen readers on Linux via this flag\r\n\t\tSUPPORTED_ELECTRON_SWITCHES.push('force-renderer-accessibility');\r\n\r\n\t\t// override which password-store is used on Linux\r\n\t\tSUPPORTED_ELECTRON_SWITCHES.push('password-store');\r\n\t}\r\n\r\n\tconst SUPPORTED_MAIN_PROCESS_SWITCHES = [\r\n\r\n\t\t// Persistently enable proposed api via argv.json: https://github.com/microsoft/vscode/issues/99775\r\n\t\t'enable-proposed-api',\r\n\r\n\t\t// Log level to use. Default is 'info'. Allowed values are 'error', 'warn', 'info', 'debug', 'trace', 'off'.\r\n\t\t'log-level',\r\n\r\n\t\t// Use an in-memory storage for secrets\r\n\t\t'use-inmemory-secretstorage',\r\n\r\n\t\t// Enables display tracking to restore maximized windows under RDP: https://github.com/electron/electron/issues/47016\r\n\t\t'enable-rdp-display-tracking'\r\n\t];\r\n\r\n\t// Read argv config\r\n\tconst argvConfig = readArgvConfigSync();\r\n\r\n\tObject.keys(argvConfig).forEach(argvKey => {\r\n\t\tconst argvValue = argvConfig[argvKey];\r\n\r\n\t\t// Append Electron flags to Electron\r\n\t\tif (SUPPORTED_ELECTRON_SWITCHES.indexOf(argvKey) !== -1) {\r\n\t\t\tif (argvValue === true || argvValue === 'true') {\r\n\t\t\t\tif (argvKey === 'disable-hardware-acceleration') {\r\n\t\t\t\t\tapp.disableHardwareAcceleration(); // needs to be called explicitly\r\n\t\t\t\t} else {\r\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey);\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof argvValue === 'string' && argvValue) {\r\n\t\t\t\tif (argvKey === 'password-store') {\r\n\t\t\t\t\t// Password store\r\n\t\t\t\t\t// TODO@TylerLeonhardt: Remove this migration in 3 months\r\n\t\t\t\t\tlet migratedArgvValue = argvValue;\r\n\t\t\t\t\tif (argvValue === 'gnome' || argvValue === 'gnome-keyring') {\r\n\t\t\t\t\t\tmigratedArgvValue = 'gnome-libsecret';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, migratedArgvValue);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, argvValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Append main process flags to process.argv\r\n\t\telse if (SUPPORTED_MAIN_PROCESS_SWITCHES.indexOf(argvKey) !== -1) {\r\n\t\t\tswitch (argvKey) {\r\n\t\t\t\tcase 'enable-proposed-api':\r\n\t\t\t\t\tif (Array.isArray(argvValue)) {\r\n\t\t\t\t\t\targvValue.forEach(id => id && typeof id === 'string' && process.argv.push('--enable-proposed-api', id));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(`Unexpected value for \\`enable-proposed-api\\` in argv.json. Expected array of extension ids.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'log-level':\r\n\t\t\t\t\tif (typeof argvValue === 'string') {\r\n\t\t\t\t\t\tprocess.argv.push('--log', argvValue);\r\n\t\t\t\t\t} else if (Array.isArray(argvValue)) {\r\n\t\t\t\t\t\tfor (const value of argvValue) {\r\n\t\t\t\t\t\t\tprocess.argv.push('--log', value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'use-inmemory-secretstorage':\r\n\t\t\t\t\tif (argvValue) {\r\n\t\t\t\t\t\tprocess.argv.push('--use-inmemory-secretstorage');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'enable-rdp-display-tracking':\r\n\t\t\t\t\tif (argvValue) {\r\n\t\t\t\t\t\tprocess.argv.push('--enable-rdp-display-tracking');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Following features are enabled from the runtime:\r\n\t// `DocumentPolicyIncludeJSCallStacksInCrashReports` - https://www.electronjs.org/docs/latest/api/web-frame-main#framecollectjavascriptcallstack-experimental\r\n\t// `EarlyEstablishGpuChannel` - Refs https://issues.chromium.org/issues/40208065\r\n\t// `EstablishGpuChannelAsync` - Refs https://issues.chromium.org/issues/40208065\r\n\tconst featuresToEnable =\r\n\t\t`DocumentPolicyIncludeJSCallStacksInCrashReports,EarlyEstablishGpuChannel,EstablishGpuChannelAsync,${app.commandLine.getSwitchValue('enable-features')}`;\r\n\tapp.commandLine.appendSwitch('enable-features', featuresToEnable);\r\n\r\n\t// Following features are disabled from the runtime:\r\n\t// `CalculateNativeWinOcclusion` - Disable native window occlusion tracker (https://groups.google.com/a/chromium.org/g/embedder-dev/c/ZF3uHHyWLKw/m/VDN2hDXMAAAJ)\r\n\tconst featuresToDisable =\r\n\t\t`CalculateNativeWinOcclusion,${app.commandLine.getSwitchValue('disable-features')}`;\r\n\tapp.commandLine.appendSwitch('disable-features', featuresToDisable);\r\n\r\n\t// Blink features to configure.\r\n\t// `FontMatchingCTMigration` - Siwtch font matching on macOS to Appkit (Refs https://github.com/microsoft/vscode/issues/224496#issuecomment-2270418470).\r\n\t// `StandardizedBrowserZoom` - Disable zoom adjustment for bounding box (https://github.com/microsoft/vscode/issues/232750#issuecomment-2459495394)\r\n\tconst blinkFeaturesToDisable =\r\n\t\t`FontMatchingCTMigration,StandardizedBrowserZoom,${app.commandLine.getSwitchValue('disable-blink-features')}`;\r\n\tapp.commandLine.appendSwitch('disable-blink-features', blinkFeaturesToDisable);\r\n\r\n\t// Support JS Flags\r\n\tconst jsFlags = getJSFlags(cliArgs);\r\n\tif (jsFlags) {\r\n\t\tapp.commandLine.appendSwitch('js-flags', jsFlags);\r\n\t}\r\n\r\n\t// Use portal version 4 that supports current_folder option\r\n\t// to address https://github.com/microsoft/vscode/issues/213780\r\n\t// Runtime sets the default version to 3, refs https://github.com/electron/electron/pull/44426\r\n\tapp.commandLine.appendSwitch('xdg-portal-required-version', '4');\r\n\r\n\treturn argvConfig;\r\n}\r\n\r\ninterface IArgvConfig {\r\n\t[key: string]: string | string[] | boolean | undefined;\r\n\treadonly locale?: string;\r\n\treadonly 'disable-lcd-text'?: boolean;\r\n\treadonly 'proxy-bypass-list'?: string;\r\n\treadonly 'disable-hardware-acceleration'?: boolean;\r\n\treadonly 'force-color-profile'?: string;\r\n\treadonly 'enable-crash-reporter'?: boolean;\r\n\treadonly 'crash-reporter-id'?: string;\r\n\treadonly 'enable-proposed-api'?: string[];\r\n\treadonly 'log-level'?: string | string[];\r\n\treadonly 'disable-chromium-sandbox'?: boolean;\r\n\treadonly 'use-inmemory-secretstorage'?: boolean;\r\n\treadonly 'enable-rdp-display-tracking'?: boolean;\r\n}\r\n\r\nfunction readArgvConfigSync(): IArgvConfig {\r\n\r\n\t// Read or create the argv.json config file sync before app('ready')\r\n\tconst argvConfigPath = getArgvConfigPath();\r\n\tlet argvConfig: IArgvConfig | undefined = undefined;\r\n\ttry {\r\n\t\targvConfig = parse(fs.readFileSync(argvConfigPath).toString());\r\n\t} catch (error) {\r\n\t\tif (error && error.code === 'ENOENT') {\r\n\t\t\tcreateDefaultArgvConfigSync(argvConfigPath);\r\n\t\t} else {\r\n\t\t\tconsole.warn(`Unable to read argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);\r\n\t\t}\r\n\t}\r\n\r\n\t// Fallback to default\r\n\tif (!argvConfig) {\r\n\t\targvConfig = {};\r\n\t}\r\n\r\n\treturn argvConfig;\r\n}\r\n\r\nfunction createDefaultArgvConfigSync(argvConfigPath: string): void {\r\n\ttry {\r\n\r\n\t\t// Ensure argv config parent exists\r\n\t\tconst argvConfigPathDirname = path.dirname(argvConfigPath);\r\n\t\tif (!fs.existsSync(argvConfigPathDirname)) {\r\n\t\t\tfs.mkdirSync(argvConfigPathDirname);\r\n\t\t}\r\n\r\n\t\t// Default argv content\r\n\t\tconst defaultArgvConfigContent = [\r\n\t\t\t'// This configuration file allows you to pass permanent command line arguments to VS Code.',\r\n\t\t\t'// Only a subset of arguments is currently supported to reduce the likelihood of breaking',\r\n\t\t\t'// the installation.',\r\n\t\t\t'//',\r\n\t\t\t'// PLEASE DO NOT CHANGE WITHOUT UNDERSTANDING THE IMPACT',\r\n\t\t\t'//',\r\n\t\t\t'// NOTE: Changing this file requires a restart of VS Code.',\r\n\t\t\t'{',\r\n\t\t\t'\t// Use software rendering instead of hardware accelerated rendering.',\r\n\t\t\t'\t// This can help in cases where you see rendering issues in VS Code.',\r\n\t\t\t'\t// \"disable-hardware-acceleration\": true',\r\n\t\t\t'}'\r\n\t\t];\r\n\r\n\t\t// Create initial argv.json with default content\r\n\t\tfs.writeFileSync(argvConfigPath, defaultArgvConfigContent.join('\\n'));\r\n\t} catch (error) {\r\n\t\tconsole.error(`Unable to create argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);\r\n\t}\r\n}\r\n\r\nfunction getArgvConfigPath(): string {\r\n\tconst vscodePortable = process.env['VSCODE_PORTABLE'];\r\n\tif (vscodePortable) {\r\n\t\treturn path.join(vscodePortable, 'argv.json');\r\n\t}\r\n\r\n\tlet dataFolderName = product.dataFolderName;\r\n\tif (process.env['VSCODE_DEV']) {\r\n\t\tdataFolderName = `${dataFolderName}-dev`;\r\n\t}\r\n\r\n\treturn path.join(os.homedir(), dataFolderName!, 'argv.json');\r\n}\r\n\r\nfunction configureCrashReporter(): void {\r\n\tlet crashReporterDirectory = args['crash-reporter-directory'];\r\n\tlet submitURL = '';\r\n\tif (crashReporterDirectory) {\r\n\t\tcrashReporterDirectory = path.normalize(crashReporterDirectory);\r\n\r\n\t\tif (!path.isAbsolute(crashReporterDirectory)) {\r\n\t\t\tconsole.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory must be absolute.`);\r\n\t\t\tapp.exit(1);\r\n\t\t}\r\n\r\n\t\tif (!fs.existsSync(crashReporterDirectory)) {\r\n\t\t\ttry {\r\n\t\t\t\tfs.mkdirSync(crashReporterDirectory, { recursive: true });\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory does not seem to exist or cannot be created.`);\r\n\t\t\t\tapp.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Crashes are stored in the crashDumps directory by default, so we\r\n\t\t// need to change that directory to the provided one\r\n\t\tconsole.log(`Found --crash-reporter-directory argument. Setting crashDumps directory to be '${crashReporterDirectory}'`);\r\n\t\tapp.setPath('crashDumps', crashReporterDirectory);\r\n\t}\r\n\r\n\t// Otherwise we configure the crash reporter from product.json\r\n\telse {\r\n\t\tconst appCenter = product.appCenter;\r\n\t\tif (appCenter) {\r\n\t\t\tconst isWindows = (process.platform === 'win32');\r\n\t\t\tconst isLinux = (process.platform === 'linux');\r\n\t\t\tconst isDarwin = (process.platform === 'darwin');\r\n\t\t\tconst crashReporterId = argvConfig['crash-reporter-id'];\r\n\t\t\tconst uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r\n\t\t\tif (crashReporterId && uuidPattern.test(crashReporterId)) {\r\n\t\t\t\tif (isWindows) {\r\n\t\t\t\t\tswitch (process.arch) {\r\n\t\t\t\t\t\tcase 'x64':\r\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-x64'];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'arm64':\r\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-arm64'];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (isDarwin) {\r\n\t\t\t\t\tif (product.darwinUniversalAssetId) {\r\n\t\t\t\t\t\tsubmitURL = appCenter['darwin-universal'];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tswitch (process.arch) {\r\n\t\t\t\t\t\t\tcase 'x64':\r\n\t\t\t\t\t\t\t\tsubmitURL = appCenter['darwin'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'arm64':\r\n\t\t\t\t\t\t\t\tsubmitURL = appCenter['darwin-arm64'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (isLinux) {\r\n\t\t\t\t\tsubmitURL = appCenter['linux-x64'];\r\n\t\t\t\t}\r\n\t\t\t\tsubmitURL = submitURL.concat('&uid=', crashReporterId, '&iid=', crashReporterId, '&sid=', crashReporterId);\r\n\t\t\t\t// Send the id for child node process that are explicitly starting crash reporter.\r\n\t\t\t\t// For vscode this is ExtensionHost process currently.\r\n\t\t\t\tconst argv = process.argv;\r\n\t\t\t\tconst endOfArgsMarkerIndex = argv.indexOf('--');\r\n\t\t\t\tif (endOfArgsMarkerIndex === -1) {\r\n\t\t\t\t\targv.push('--crash-reporter-id', crashReporterId);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if the we have an argument \"--\" (end of argument marker)\r\n\t\t\t\t\t// we cannot add arguments at the end. rather, we add\r\n\t\t\t\t\t// arguments before the \"--\" marker.\r\n\t\t\t\t\targv.splice(endOfArgsMarkerIndex, 0, '--crash-reporter-id', crashReporterId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Start crash reporter for all processes\r\n\tconst productName = (product.crashReporter ? product.crashReporter.productName : undefined) || product.nameShort;\r\n\tconst companyName = (product.crashReporter ? product.crashReporter.companyName : undefined) || 'Microsoft';\r\n\tconst uploadToServer = Boolean(!process.env['VSCODE_DEV'] && submitURL && !crashReporterDirectory);\r\n\tcrashReporter.start({\r\n\t\tcompanyName,\r\n\t\tproductName: process.env['VSCODE_DEV'] ? `${productName} Dev` : productName,\r\n\t\tsubmitURL,\r\n\t\tuploadToServer,\r\n\t\tcompress: true\r\n\t});\r\n}\r\n\r\nfunction getJSFlags(cliArgs: NativeParsedArgs): string | null {\r\n\tconst jsFlags: string[] = [];\r\n\r\n\t// Add any existing JS flags we already got from the command line\r\n\tif (cliArgs['js-flags']) {\r\n\t\tjsFlags.push(cliArgs['js-flags']);\r\n\t}\r\n\r\n\tif (process.platform === 'linux') {\r\n\t\t// Fix cppgc crash on Linux with 16KB page size.\r\n\t\t// Refs https://issues.chromium.org/issues/378017037\r\n\t\t// The fix from https://github.com/electron/electron/commit/6c5b2ef55e08dc0bede02384747549c1eadac0eb\r\n\t\t// only affects non-renderer process.\r\n\t\t// The following will ensure that the flag will be\r\n\t\t// applied to the renderer process as well.\r\n\t\t// TODO(deepak1556): Remove this once we update to\r\n\t\t// Chromium >= 134.\r\n\t\tjsFlags.push('--nodecommit_pooled_pages');\r\n\t}\r\n\r\n\treturn jsFlags.length > 0 ? jsFlags.join(' ') : null;\r\n}\r\n\r\nfunction parseCLIArgs(): NativeParsedArgs {\r\n\treturn minimist(process.argv, {\r\n\t\tstring: [\r\n\t\t\t'user-data-dir',\r\n\t\t\t'locale',\r\n\t\t\t'js-flags',\r\n\t\t\t'crash-reporter-directory'\r\n\t\t],\r\n\t\tboolean: [\r\n\t\t\t'disable-chromium-sandbox',\r\n\t\t],\r\n\t\tdefault: {\r\n\t\t\t'sandbox': true\r\n\t\t},\r\n\t\talias: {\r\n\t\t\t'no-sandbox': 'sandbox'\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction registerListeners(): void {\r\n\r\n\t/**\r\n\t * macOS: when someone drops a file to the not-yet running VSCode, the open-file event fires even before\r\n\t * the app-ready event. We listen very early for open-file and remember this upon startup as path to open.\r\n\t */\r\n\tconst macOpenFiles: string[] = [];\r\n\t(globalThis as any)['macOpenFiles'] = macOpenFiles;\r\n\tapp.on('open-file', function (event, path) {\r\n\t\tmacOpenFiles.push(path);\r\n\t});\r\n\r\n\t/**\r\n\t * macOS: react to open-url requests.\r\n\t */\r\n\tconst openUrls: string[] = [];\r\n\tconst onOpenUrl =\r\n\t\tfunction (event: { preventDefault: () => void }, url: string) {\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\topenUrls.push(url);\r\n\t\t};\r\n\r\n\tapp.on('will-finish-launching', function () {\r\n\t\tapp.on('open-url', onOpenUrl);\r\n\t});\r\n\r\n\t(globalThis as any)['getOpenUrls'] = function () {\r\n\t\tapp.removeListener('open-url', onOpenUrl);\r\n\r\n\t\treturn openUrls;\r\n\t};\r\n}\r\n\r\nfunction getCodeCachePath(): string | undefined {\r\n\r\n\t// explicitly disabled via CLI args\r\n\tif (process.argv.indexOf('--no-cached-data') > 0) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t// running out of sources\r\n\tif (process.env['VSCODE_DEV']) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t// require commit id\r\n\tconst commit = product.commit;\r\n\tif (!commit) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\treturn path.join(userDataPath, 'CachedData', commit);\r\n}\r\n\r\nasync function mkdirpIgnoreError(dir: string | undefined): Promise<string | undefined> {\r\n\tif (typeof dir === 'string') {\r\n\t\ttry {\r\n\t\t\tawait fs.promises.mkdir(dir, { recursive: true });\r\n\r\n\t\t\treturn dir;\r\n\t\t} catch (error) {\r\n\t\t\t// ignore\r\n\t\t}\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\n//#region NLS Support\r\n\r\nfunction processZhLocale(appLocale: string): string {\r\n\tif (appLocale.startsWith('zh')) {\r\n\t\tconst region = appLocale.split('-')[1];\r\n\r\n\t\t// On Windows and macOS, Chinese languages returned by\r\n\t\t// app.getPreferredSystemLanguages() start with zh-hans\r\n\t\t// for Simplified Chinese or zh-hant for Traditional Chinese,\r\n\t\t// so we can easily determine whether to use Simplified or Traditional.\r\n\t\t// However, on Linux, Chinese languages returned by that same API\r\n\t\t// are of the form zh-XY, where XY is a country code.\r\n\t\t// For China (CN), Singapore (SG), and Malaysia (MY)\r\n\t\t// country codes, assume they use Simplified Chinese.\r\n\t\t// For other cases, assume they use Traditional.\r\n\t\tif (['hans', 'cn', 'sg', 'my'].includes(region)) {\r\n\t\t\treturn 'zh-cn';\r\n\t\t}\r\n\r\n\t\treturn 'zh-tw';\r\n\t}\r\n\r\n\treturn appLocale;\r\n}\r\n\r\n/**\r\n * Resolve the NLS configuration\r\n */\r\nasync function resolveNlsConfiguration(): Promise<INLSConfiguration> {\r\n\r\n\t// First, we need to test a user defined locale.\r\n\t// If it fails we try the app locale.\r\n\t// If that fails we fall back to English.\r\n\r\n\tconst nlsConfiguration = nlsConfigurationPromise ? await nlsConfigurationPromise : undefined;\r\n\tif (nlsConfiguration) {\r\n\t\treturn nlsConfiguration;\r\n\t}\r\n\r\n\t// Try to use the app locale which is only valid\r\n\t// after the app ready event has been fired.\r\n\r\n\tlet userLocale = app.getLocale();\r\n\tif (!userLocale) {\r\n\t\treturn {\r\n\t\t\tuserLocale: 'en',\r\n\t\t\tosLocale,\r\n\t\t\tresolvedLanguage: 'en',\r\n\t\t\tdefaultMessagesFile: path.join(__dirname, 'nls.messages.json'),\r\n\r\n\t\t\t// NLS: below 2 are a relic from old times only used by vscode-nls and deprecated\r\n\t\t\tlocale: 'en',\r\n\t\t\tavailableLanguages: {}\r\n\t\t};\r\n\t}\r\n\r\n\t// See above the comment about the loader and case sensitiveness\r\n\tuserLocale = processZhLocale(userLocale.toLowerCase());\r\n\r\n\treturn resolveNLSConfiguration({\r\n\t\tuserLocale,\r\n\t\tosLocale,\r\n\t\tcommit: product.commit,\r\n\t\tuserDataPath,\r\n\t\tnlsMetadataPath: __dirname\r\n\t});\r\n}\r\n\r\n/**\r\n * Language tags are case insensitive however an ESM loader is case sensitive\r\n * To make this work on case preserving & insensitive FS we do the following:\r\n * the language bundles have lower case language tags and we always lower case\r\n * the locale we receive from the user or OS.\r\n */\r\nfunction getUserDefinedLocale(argvConfig: IArgvConfig): string | undefined {\r\n\tconst locale = args['locale'];\r\n\tif (locale) {\r\n\t\treturn locale.toLowerCase(); // a directly provided --locale always wins\r\n\t}\r\n\r\n\treturn typeof argvConfig?.locale === 'string' ? argvConfig.locale.toLowerCase() : undefined;\r\n}\r\n\r\n//#endregion\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'original-fs';\r\nimport * as os from 'os';\r\nimport { performance } from 'perf_hooks';\r\nimport { configurePortable } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\nimport { fileURLToPath } from 'url';\r\nimport { app, protocol, crashReporter, Menu, contentTracing } from 'electron';\r\nimport minimist from 'minimist';\r\nimport { product } from './bootstrap-meta.js';\r\nimport { parse } from './vs/base/common/jsonc.js';\r\nimport { getUserDataPath } from './vs/platform/environment/node/userDataPath.js';\r\nimport * as perf from './vs/base/common/performance.js';\r\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\r\nimport { getUNCHost, addUNCHostToAllowlist } from './vs/base/node/unc.js';\r\nimport { INLSConfiguration } from './vs/nls.js';\r\nimport { NativeParsedArgs } from './vs/platform/environment/common/argv.js';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nperf.mark('code/didStartMain');\r\n\r\nperf.mark('code/willLoadMainBundle', {\r\n\t// When built, the main bundle is a single JS file with all\r\n\t// dependencies inlined. As such, we mark `willLoadMainBundle`\r\n\t// as the start of the main bundle loading process.\r\n\tstartTime: Math.floor(performance.timeOrigin)\r\n});\r\nperf.mark('code/didLoadMainBundle');\r\n\r\n// Enable portable support\r\nconst portable = configurePortable(product);\r\n\r\nconst args = parseCLIArgs();\r\n// Configure static command line arguments\r\nconst argvConfig = configureCommandlineSwitchesSync(args);\r\n// Enable sandbox globally unless\r\n// 1) disabled via command line using either\r\n//    `--no-sandbox` or `--disable-chromium-sandbox` argument.\r\n// 2) argv.json contains `disable-chromium-sandbox: true`.\r\nif (args['sandbox'] &&\r\n\t!args['disable-chromium-sandbox'] &&\r\n\t!argvConfig['disable-chromium-sandbox']) {\r\n\tapp.enableSandbox();\r\n} else if (app.commandLine.hasSwitch('no-sandbox') &&\r\n\t!app.commandLine.hasSwitch('disable-gpu-sandbox')) {\r\n\t// Disable GPU sandbox whenever --no-sandbox is used.\r\n\tapp.commandLine.appendSwitch('disable-gpu-sandbox');\r\n} else {\r\n\tapp.commandLine.appendSwitch('no-sandbox');\r\n\tapp.commandLine.appendSwitch('disable-gpu-sandbox');\r\n}\r\n\r\n// Set userData path before app 'ready' event\r\nconst userDataPath = getUserDataPath(args, product.nameShort ?? 'code-oss-dev');\r\nif (process.platform === 'win32') {\r\n\tconst userDataUNCHost = getUNCHost(userDataPath);\r\n\tif (userDataUNCHost) {\r\n\t\taddUNCHostToAllowlist(userDataUNCHost); // enables to use UNC paths in userDataPath\r\n\t}\r\n}\r\napp.setPath('userData', userDataPath);\r\n\r\n// Resolve code cache path\r\nconst codeCachePath = getCodeCachePath();\r\n\r\n// Disable default menu (https://github.com/electron/electron/issues/35512)\r\nMenu.setApplicationMenu(null);\r\n\r\n// Configure crash reporter\r\nperf.mark('code/willStartCrashReporter');\r\n// If a crash-reporter-directory is specified we store the crash reports\r\n// in the specified directory and don't upload them to the crash server.\r\n//\r\n// Appcenter crash reporting is enabled if\r\n// * enable-crash-reporter runtime argument is set to 'true'\r\n// * --disable-crash-reporter command line parameter is not set\r\n//\r\n// Disable crash reporting in all other cases.\r\nif (args['crash-reporter-directory'] || (argvConfig['enable-crash-reporter'] && !args['disable-crash-reporter'])) {\r\n\tconfigureCrashReporter();\r\n}\r\nperf.mark('code/didStartCrashReporter');\r\n\r\n// Set logs path before app 'ready' event if running portable\r\n// to ensure that no 'logs' folder is created on disk at a\r\n// location outside of the portable directory\r\n// (https://github.com/microsoft/vscode/issues/56651)\r\nif (portable && portable.isPortable) {\r\n\tapp.setAppLogsPath(path.join(userDataPath, 'logs'));\r\n}\r\n\r\n// Register custom schemes with privileges\r\nprotocol.registerSchemesAsPrivileged([\r\n\t{\r\n\t\tscheme: 'vscode-webview',\r\n\t\tprivileges: { standard: true, secure: true, supportFetchAPI: true, corsEnabled: true, allowServiceWorkers: true, codeCache: true }\r\n\t},\r\n\t{\r\n\t\tscheme: 'vscode-file',\r\n\t\tprivileges: { secure: true, standard: true, supportFetchAPI: true, corsEnabled: true, codeCache: true }\r\n\t}\r\n]);\r\n\r\n// Global app listeners\r\nregisterListeners();\r\n\r\n/**\r\n * We can resolve the NLS configuration early if it is defined\r\n * in argv.json before `app.ready` event. Otherwise we can only\r\n * resolve NLS after `app.ready` event to resolve the OS locale.\r\n */\r\nlet nlsConfigurationPromise: Promise<INLSConfiguration> | undefined = undefined;\r\n\r\n// Use the most preferred OS language for language recommendation.\r\n// The API might return an empty array on Linux, such as when\r\n// the 'C' locale is the user's only configured locale.\r\n// No matter the OS, if the array is empty, default back to 'en'.\r\nconst osLocale = processZhLocale((app.getPreferredSystemLanguages()?.[0] ?? 'en').toLowerCase());\r\nconst userLocale = getUserDefinedLocale(argvConfig);\r\nif (userLocale) {\r\n\tnlsConfigurationPromise = resolveNLSConfiguration({\r\n\t\tuserLocale,\r\n\t\tosLocale,\r\n\t\tcommit: product.commit,\r\n\t\tuserDataPath,\r\n\t\tnlsMetadataPath: __dirname\r\n\t});\r\n}\r\n\r\n// Pass in the locale to Electron so that the\r\n// Windows Control Overlay is rendered correctly on Windows.\r\n// For now, don't pass in the locale on macOS due to\r\n// https://github.com/microsoft/vscode/issues/167543.\r\n// If the locale is `qps-ploc`, the Microsoft\r\n// Pseudo Language Language Pack is being used.\r\n// In that case, use `en` as the Electron locale.\r\n\r\nif (process.platform === 'win32' || process.platform === 'linux') {\r\n\tconst electronLocale = (!userLocale || userLocale === 'qps-ploc') ? 'en' : userLocale;\r\n\tapp.commandLine.appendSwitch('lang', electronLocale);\r\n}\r\n\r\n// Load our code once ready\r\napp.once('ready', function () {\r\n\tif (args['trace']) {\r\n\t\tlet traceOptions: Electron.TraceConfig | Electron.TraceCategoriesAndOptions;\r\n\t\tif (args['trace-memory-infra']) {\r\n\t\t\tconst customCategories = args['trace-category-filter']?.split(',') || [];\r\n\t\t\tcustomCategories.push('disabled-by-default-memory-infra', 'disabled-by-default-memory-infra.v8.code_stats');\r\n\t\t\ttraceOptions = {\r\n\t\t\t\tincluded_categories: customCategories,\r\n\t\t\t\texcluded_categories: ['*'],\r\n\t\t\t\tmemory_dump_config: {\r\n\t\t\t\t\tallowed_dump_modes: ['light', 'detailed'],\r\n\t\t\t\t\ttriggers: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: 'periodic_interval',\r\n\t\t\t\t\t\t\tmode: 'detailed',\r\n\t\t\t\t\t\t\tmin_time_between_dumps_ms: 10000\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: 'periodic_interval',\r\n\t\t\t\t\t\t\tmode: 'light',\r\n\t\t\t\t\t\t\tmin_time_between_dumps_ms: 1000\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\ttraceOptions = {\r\n\t\t\t\tcategoryFilter: args['trace-category-filter'] || '*',\r\n\t\t\t\ttraceOptions: args['trace-options'] || 'record-until-full,enable-sampling'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcontentTracing.startRecording(traceOptions).finally(() => onReady());\r\n\t} else {\r\n\t\tonReady();\r\n\t}\r\n});\r\n\r\nasync function onReady() {\r\n\tperf.mark('code/mainAppReady');\r\n\r\n\ttry {\r\n\t\tconst [, nlsConfig] = await Promise.all([\r\n\t\t\tmkdirpIgnoreError(codeCachePath),\r\n\t\t\tresolveNlsConfiguration()\r\n\t\t]);\r\n\r\n\t\tawait startup(codeCachePath, nlsConfig);\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n}\r\n\r\n/**\r\n * Main startup routine\r\n */\r\nasync function startup(codeCachePath: string | undefined, nlsConfig: INLSConfiguration): Promise<void> {\r\n\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfig);\r\n\tprocess.env['VSCODE_CODE_CACHE_PATH'] = codeCachePath || '';\r\n\r\n\t// Bootstrap ESM\r\n\tawait bootstrapESM();\r\n\r\n\t// Load Main\r\n\tawait import('./vs/code/electron-main/main.js');\r\n\tperf.mark('code/didRunMainBundle');\r\n}\r\n\r\nfunction configureCommandlineSwitchesSync(cliArgs: NativeParsedArgs) {\r\n\tconst SUPPORTED_ELECTRON_SWITCHES = [\r\n\r\n\t\t// alias from us for --disable-gpu\r\n\t\t'disable-hardware-acceleration',\r\n\r\n\t\t// override for the color profile to use\r\n\t\t'force-color-profile',\r\n\r\n\t\t// disable LCD font rendering, a Chromium flag\r\n\t\t'disable-lcd-text',\r\n\r\n\t\t// bypass any specified proxy for the given semi-colon-separated list of hosts\r\n\t\t'proxy-bypass-list'\r\n\t];\r\n\r\n\tif (process.platform === 'linux') {\r\n\r\n\t\t// Force enable screen readers on Linux via this flag\r\n\t\tSUPPORTED_ELECTRON_SWITCHES.push('force-renderer-accessibility');\r\n\r\n\t\t// override which password-store is used on Linux\r\n\t\tSUPPORTED_ELECTRON_SWITCHES.push('password-store');\r\n\t}\r\n\r\n\tconst SUPPORTED_MAIN_PROCESS_SWITCHES = [\r\n\r\n\t\t// Persistently enable proposed api via argv.json: https://github.com/microsoft/vscode/issues/99775\r\n\t\t'enable-proposed-api',\r\n\r\n\t\t// Log level to use. Default is 'info'. Allowed values are 'error', 'warn', 'info', 'debug', 'trace', 'off'.\r\n\t\t'log-level',\r\n\r\n\t\t// Use an in-memory storage for secrets\r\n\t\t'use-inmemory-secretstorage',\r\n\r\n\t\t// Enables display tracking to restore maximized windows under RDP: https://github.com/electron/electron/issues/47016\r\n\t\t'enable-rdp-display-tracking'\r\n\t];\r\n\r\n\t// Read argv config\r\n\tconst argvConfig = readArgvConfigSync();\r\n\r\n\tObject.keys(argvConfig).forEach(argvKey => {\r\n\t\tconst argvValue = argvConfig[argvKey];\r\n\r\n\t\t// Append Electron flags to Electron\r\n\t\tif (SUPPORTED_ELECTRON_SWITCHES.indexOf(argvKey) !== -1) {\r\n\t\t\tif (argvValue === true || argvValue === 'true') {\r\n\t\t\t\tif (argvKey === 'disable-hardware-acceleration') {\r\n\t\t\t\t\tapp.disableHardwareAcceleration(); // needs to be called explicitly\r\n\t\t\t\t} else {\r\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey);\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof argvValue === 'string' && argvValue) {\r\n\t\t\t\tif (argvKey === 'password-store') {\r\n\t\t\t\t\t// Password store\r\n\t\t\t\t\t// TODO@TylerLeonhardt: Remove this migration in 3 months\r\n\t\t\t\t\tlet migratedArgvValue = argvValue;\r\n\t\t\t\t\tif (argvValue === 'gnome' || argvValue === 'gnome-keyring') {\r\n\t\t\t\t\t\tmigratedArgvValue = 'gnome-libsecret';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, migratedArgvValue);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, argvValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Append main process flags to process.argv\r\n\t\telse if (SUPPORTED_MAIN_PROCESS_SWITCHES.indexOf(argvKey) !== -1) {\r\n\t\t\tswitch (argvKey) {\r\n\t\t\t\tcase 'enable-proposed-api':\r\n\t\t\t\t\tif (Array.isArray(argvValue)) {\r\n\t\t\t\t\t\targvValue.forEach(id => id && typeof id === 'string' && process.argv.push('--enable-proposed-api', id));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(`Unexpected value for \\`enable-proposed-api\\` in argv.json. Expected array of extension ids.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'log-level':\r\n\t\t\t\t\tif (typeof argvValue === 'string') {\r\n\t\t\t\t\t\tprocess.argv.push('--log', argvValue);\r\n\t\t\t\t\t} else if (Array.isArray(argvValue)) {\r\n\t\t\t\t\t\tfor (const value of argvValue) {\r\n\t\t\t\t\t\t\tprocess.argv.push('--log', value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'use-inmemory-secretstorage':\r\n\t\t\t\t\tif (argvValue) {\r\n\t\t\t\t\t\tprocess.argv.push('--use-inmemory-secretstorage');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'enable-rdp-display-tracking':\r\n\t\t\t\t\tif (argvValue) {\r\n\t\t\t\t\t\tprocess.argv.push('--enable-rdp-display-tracking');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Following features are enabled from the runtime:\r\n\t// `DocumentPolicyIncludeJSCallStacksInCrashReports` - https://www.electronjs.org/docs/latest/api/web-frame-main#framecollectjavascriptcallstack-experimental\r\n\t// `EarlyEstablishGpuChannel` - Refs https://issues.chromium.org/issues/40208065\r\n\t// `EstablishGpuChannelAsync` - Refs https://issues.chromium.org/issues/40208065\r\n\tconst featuresToEnable =\r\n\t\t`DocumentPolicyIncludeJSCallStacksInCrashReports,EarlyEstablishGpuChannel,EstablishGpuChannelAsync,${app.commandLine.getSwitchValue('enable-features')}`;\r\n\tapp.commandLine.appendSwitch('enable-features', featuresToEnable);\r\n\r\n\t// Following features are disabled from the runtime:\r\n\t// `CalculateNativeWinOcclusion` - Disable native window occlusion tracker (https://groups.google.com/a/chromium.org/g/embedder-dev/c/ZF3uHHyWLKw/m/VDN2hDXMAAAJ)\r\n\tconst featuresToDisable =\r\n\t\t`CalculateNativeWinOcclusion,${app.commandLine.getSwitchValue('disable-features')}`;\r\n\tapp.commandLine.appendSwitch('disable-features', featuresToDisable);\r\n\r\n\t// Blink features to configure.\r\n\t// `FontMatchingCTMigration` - Siwtch font matching on macOS to Appkit (Refs https://github.com/microsoft/vscode/issues/224496#issuecomment-2270418470).\r\n\t// `StandardizedBrowserZoom` - Disable zoom adjustment for bounding box (https://github.com/microsoft/vscode/issues/232750#issuecomment-2459495394)\r\n\tconst blinkFeaturesToDisable =\r\n\t\t`FontMatchingCTMigration,StandardizedBrowserZoom,${app.commandLine.getSwitchValue('disable-blink-features')}`;\r\n\tapp.commandLine.appendSwitch('disable-blink-features', blinkFeaturesToDisable);\r\n\r\n\t// Support JS Flags\r\n\tconst jsFlags = getJSFlags(cliArgs);\r\n\tif (jsFlags) {\r\n\t\tapp.commandLine.appendSwitch('js-flags', jsFlags);\r\n\t}\r\n\r\n\t// Use portal version 4 that supports current_folder option\r\n\t// to address https://github.com/microsoft/vscode/issues/213780\r\n\t// Runtime sets the default version to 3, refs https://github.com/electron/electron/pull/44426\r\n\tapp.commandLine.appendSwitch('xdg-portal-required-version', '4');\r\n\r\n\treturn argvConfig;\r\n}\r\n\r\ninterface IArgvConfig {\r\n\t[key: string]: string | string[] | boolean | undefined;\r\n\treadonly locale?: string;\r\n\treadonly 'disable-lcd-text'?: boolean;\r\n\treadonly 'proxy-bypass-list'?: string;\r\n\treadonly 'disable-hardware-acceleration'?: boolean;\r\n\treadonly 'force-color-profile'?: string;\r\n\treadonly 'enable-crash-reporter'?: boolean;\r\n\treadonly 'crash-reporter-id'?: string;\r\n\treadonly 'enable-proposed-api'?: string[];\r\n\treadonly 'log-level'?: string | string[];\r\n\treadonly 'disable-chromium-sandbox'?: boolean;\r\n\treadonly 'use-inmemory-secretstorage'?: boolean;\r\n\treadonly 'enable-rdp-display-tracking'?: boolean;\r\n}\r\n\r\nfunction readArgvConfigSync(): IArgvConfig {\r\n\r\n\t// Read or create the argv.json config file sync before app('ready')\r\n\tconst argvConfigPath = getArgvConfigPath();\r\n\tlet argvConfig: IArgvConfig | undefined = undefined;\r\n\ttry {\r\n\t\targvConfig = parse(fs.readFileSync(argvConfigPath).toString());\r\n\t} catch (error) {\r\n\t\tif (error && error.code === 'ENOENT') {\r\n\t\t\tcreateDefaultArgvConfigSync(argvConfigPath);\r\n\t\t} else {\r\n\t\t\tconsole.warn(`Unable to read argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);\r\n\t\t}\r\n\t}\r\n\r\n\t// Fallback to default\r\n\tif (!argvConfig) {\r\n\t\targvConfig = {};\r\n\t}\r\n\r\n\treturn argvConfig;\r\n}\r\n\r\nfunction createDefaultArgvConfigSync(argvConfigPath: string): void {\r\n\ttry {\r\n\r\n\t\t// Ensure argv config parent exists\r\n\t\tconst argvConfigPathDirname = path.dirname(argvConfigPath);\r\n\t\tif (!fs.existsSync(argvConfigPathDirname)) {\r\n\t\t\tfs.mkdirSync(argvConfigPathDirname);\r\n\t\t}\r\n\r\n\t\t// Default argv content\r\n\t\tconst defaultArgvConfigContent = [\r\n\t\t\t'// This configuration file allows you to pass permanent command line arguments to VS Code.',\r\n\t\t\t'// Only a subset of arguments is currently supported to reduce the likelihood of breaking',\r\n\t\t\t'// the installation.',\r\n\t\t\t'//',\r\n\t\t\t'// PLEASE DO NOT CHANGE WITHOUT UNDERSTANDING THE IMPACT',\r\n\t\t\t'//',\r\n\t\t\t'// NOTE: Changing this file requires a restart of VS Code.',\r\n\t\t\t'{',\r\n\t\t\t'\t// Use software rendering instead of hardware accelerated rendering.',\r\n\t\t\t'\t// This can help in cases where you see rendering issues in VS Code.',\r\n\t\t\t'\t// \"disable-hardware-acceleration\": true',\r\n\t\t\t'}'\r\n\t\t];\r\n\r\n\t\t// Create initial argv.json with default content\r\n\t\tfs.writeFileSync(argvConfigPath, defaultArgvConfigContent.join('\\n'));\r\n\t} catch (error) {\r\n\t\tconsole.error(`Unable to create argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);\r\n\t}\r\n}\r\n\r\nfunction getArgvConfigPath(): string {\r\n\tconst vscodePortable = process.env['VSCODE_PORTABLE'];\r\n\tif (vscodePortable) {\r\n\t\treturn path.join(vscodePortable, 'argv.json');\r\n\t}\r\n\r\n\tlet dataFolderName = product.dataFolderName;\r\n\tif (process.env['VSCODE_DEV']) {\r\n\t\tdataFolderName = `${dataFolderName}-dev`;\r\n\t}\r\n\r\n\treturn path.join(os.homedir(), dataFolderName!, 'argv.json');\r\n}\r\n\r\nfunction configureCrashReporter(): void {\r\n\tlet crashReporterDirectory = args['crash-reporter-directory'];\r\n\tlet submitURL = '';\r\n\tif (crashReporterDirectory) {\r\n\t\tcrashReporterDirectory = path.normalize(crashReporterDirectory);\r\n\r\n\t\tif (!path.isAbsolute(crashReporterDirectory)) {\r\n\t\t\tconsole.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory must be absolute.`);\r\n\t\t\tapp.exit(1);\r\n\t\t}\r\n\r\n\t\tif (!fs.existsSync(crashReporterDirectory)) {\r\n\t\t\ttry {\r\n\t\t\t\tfs.mkdirSync(crashReporterDirectory, { recursive: true });\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory does not seem to exist or cannot be created.`);\r\n\t\t\t\tapp.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Crashes are stored in the crashDumps directory by default, so we\r\n\t\t// need to change that directory to the provided one\r\n\t\tconsole.log(`Found --crash-reporter-directory argument. Setting crashDumps directory to be '${crashReporterDirectory}'`);\r\n\t\tapp.setPath('crashDumps', crashReporterDirectory);\r\n\t}\r\n\r\n\t// Otherwise we configure the crash reporter from product.json\r\n\telse {\r\n\t\tconst appCenter = product.appCenter;\r\n\t\tif (appCenter) {\r\n\t\t\tconst isWindows = (process.platform === 'win32');\r\n\t\t\tconst isLinux = (process.platform === 'linux');\r\n\t\t\tconst isDarwin = (process.platform === 'darwin');\r\n\t\t\tconst crashReporterId = argvConfig['crash-reporter-id'];\r\n\t\t\tconst uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r\n\t\t\tif (crashReporterId && uuidPattern.test(crashReporterId)) {\r\n\t\t\t\tif (isWindows) {\r\n\t\t\t\t\tswitch (process.arch) {\r\n\t\t\t\t\t\tcase 'x64':\r\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-x64'];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'arm64':\r\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-arm64'];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (isDarwin) {\r\n\t\t\t\t\tif (product.darwinUniversalAssetId) {\r\n\t\t\t\t\t\tsubmitURL = appCenter['darwin-universal'];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tswitch (process.arch) {\r\n\t\t\t\t\t\t\tcase 'x64':\r\n\t\t\t\t\t\t\t\tsubmitURL = appCenter['darwin'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'arm64':\r\n\t\t\t\t\t\t\t\tsubmitURL = appCenter['darwin-arm64'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (isLinux) {\r\n\t\t\t\t\tsubmitURL = appCenter['linux-x64'];\r\n\t\t\t\t}\r\n\t\t\t\tsubmitURL = submitURL.concat('&uid=', crashReporterId, '&iid=', crashReporterId, '&sid=', crashReporterId);\r\n\t\t\t\t// Send the id for child node process that are explicitly starting crash reporter.\r\n\t\t\t\t// For vscode this is ExtensionHost process currently.\r\n\t\t\t\tconst argv = process.argv;\r\n\t\t\t\tconst endOfArgsMarkerIndex = argv.indexOf('--');\r\n\t\t\t\tif (endOfArgsMarkerIndex === -1) {\r\n\t\t\t\t\targv.push('--crash-reporter-id', crashReporterId);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if the we have an argument \"--\" (end of argument marker)\r\n\t\t\t\t\t// we cannot add arguments at the end. rather, we add\r\n\t\t\t\t\t// arguments before the \"--\" marker.\r\n\t\t\t\t\targv.splice(endOfArgsMarkerIndex, 0, '--crash-reporter-id', crashReporterId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Start crash reporter for all processes\r\n\tconst productName = (product.crashReporter ? product.crashReporter.productName : undefined) || product.nameShort;\r\n\tconst companyName = (product.crashReporter ? product.crashReporter.companyName : undefined) || 'Microsoft';\r\n\tconst uploadToServer = Boolean(!process.env['VSCODE_DEV'] && submitURL && !crashReporterDirectory);\r\n\tcrashReporter.start({\r\n\t\tcompanyName,\r\n\t\tproductName: process.env['VSCODE_DEV'] ? `${productName} Dev` : productName,\r\n\t\tsubmitURL,\r\n\t\tuploadToServer,\r\n\t\tcompress: true\r\n\t});\r\n}\r\n\r\nfunction getJSFlags(cliArgs: NativeParsedArgs): string | null {\r\n\tconst jsFlags: string[] = [];\r\n\r\n\t// Add any existing JS flags we already got from the command line\r\n\tif (cliArgs['js-flags']) {\r\n\t\tjsFlags.push(cliArgs['js-flags']);\r\n\t}\r\n\r\n\tif (process.platform === 'linux') {\r\n\t\t// Fix cppgc crash on Linux with 16KB page size.\r\n\t\t// Refs https://issues.chromium.org/issues/378017037\r\n\t\t// The fix from https://github.com/electron/electron/commit/6c5b2ef55e08dc0bede02384747549c1eadac0eb\r\n\t\t// only affects non-renderer process.\r\n\t\t// The following will ensure that the flag will be\r\n\t\t// applied to the renderer process as well.\r\n\t\t// TODO(deepak1556): Remove this once we update to\r\n\t\t// Chromium >= 134.\r\n\t\tjsFlags.push('--nodecommit_pooled_pages');\r\n\t}\r\n\r\n\treturn jsFlags.length > 0 ? jsFlags.join(' ') : null;\r\n}\r\n\r\nfunction parseCLIArgs(): NativeParsedArgs {\r\n\treturn minimist(process.argv, {\r\n\t\tstring: [\r\n\t\t\t'user-data-dir',\r\n\t\t\t'locale',\r\n\t\t\t'js-flags',\r\n\t\t\t'crash-reporter-directory'\r\n\t\t],\r\n\t\tboolean: [\r\n\t\t\t'disable-chromium-sandbox',\r\n\t\t],\r\n\t\tdefault: {\r\n\t\t\t'sandbox': true\r\n\t\t},\r\n\t\talias: {\r\n\t\t\t'no-sandbox': 'sandbox'\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction registerListeners(): void {\r\n\r\n\t/**\r\n\t * macOS: when someone drops a file to the not-yet running VSCode, the open-file event fires even before\r\n\t * the app-ready event. We listen very early for open-file and remember this upon startup as path to open.\r\n\t */\r\n\tconst macOpenFiles: string[] = [];\r\n\t(globalThis as any)['macOpenFiles'] = macOpenFiles;\r\n\tapp.on('open-file', function (event, path) {\r\n\t\tmacOpenFiles.push(path);\r\n\t});\r\n\r\n\t/**\r\n\t * macOS: react to open-url requests.\r\n\t */\r\n\tconst openUrls: string[] = [];\r\n\tconst onOpenUrl =\r\n\t\tfunction (event: { preventDefault: () => void }, url: string) {\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\topenUrls.push(url);\r\n\t\t};\r\n\r\n\tapp.on('will-finish-launching', function () {\r\n\t\tapp.on('open-url', onOpenUrl);\r\n\t});\r\n\r\n\t(globalThis as any)['getOpenUrls'] = function () {\r\n\t\tapp.removeListener('open-url', onOpenUrl);\r\n\r\n\t\treturn openUrls;\r\n\t};\r\n}\r\n\r\nfunction getCodeCachePath(): string | undefined {\r\n\r\n\t// explicitly disabled via CLI args\r\n\tif (process.argv.indexOf('--no-cached-data') > 0) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t// running out of sources\r\n\tif (process.env['VSCODE_DEV']) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t// require commit id\r\n\tconst commit = product.commit;\r\n\tif (!commit) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\treturn path.join(userDataPath, 'CachedData', commit);\r\n}\r\n\r\nasync function mkdirpIgnoreError(dir: string | undefined): Promise<string | undefined> {\r\n\tif (typeof dir === 'string') {\r\n\t\ttry {\r\n\t\t\tawait fs.promises.mkdir(dir, { recursive: true });\r\n\r\n\t\t\treturn dir;\r\n\t\t} catch (error) {\r\n\t\t\t// ignore\r\n\t\t}\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n\r\n//#region NLS Support\r\n\r\nfunction processZhLocale(appLocale: string): string {\r\n\tif (appLocale.startsWith('zh')) {\r\n\t\tconst region = appLocale.split('-')[1];\r\n\r\n\t\t// On Windows and macOS, Chinese languages returned by\r\n\t\t// app.getPreferredSystemLanguages() start with zh-hans\r\n\t\t// for Simplified Chinese or zh-hant for Traditional Chinese,\r\n\t\t// so we can easily determine whether to use Simplified or Traditional.\r\n\t\t// However, on Linux, Chinese languages returned by that same API\r\n\t\t// are of the form zh-XY, where XY is a country code.\r\n\t\t// For China (CN), Singapore (SG), and Malaysia (MY)\r\n\t\t// country codes, assume they use Simplified Chinese.\r\n\t\t// For other cases, assume they use Traditional.\r\n\t\tif (['hans', 'cn', 'sg', 'my'].includes(region)) {\r\n\t\t\treturn 'zh-cn';\r\n\t\t}\r\n\r\n\t\treturn 'zh-tw';\r\n\t}\r\n\r\n\treturn appLocale;\r\n}\r\n\r\n/**\r\n * Resolve the NLS configuration\r\n */\r\nasync function resolveNlsConfiguration(): Promise<INLSConfiguration> {\r\n\r\n\t// First, we need to test a user defined locale.\r\n\t// If it fails we try the app locale.\r\n\t// If that fails we fall back to English.\r\n\r\n\tconst nlsConfiguration = nlsConfigurationPromise ? await nlsConfigurationPromise : undefined;\r\n\tif (nlsConfiguration) {\r\n\t\treturn nlsConfiguration;\r\n\t}\r\n\r\n\t// Try to use the app locale which is only valid\r\n\t// after the app ready event has been fired.\r\n\r\n\tlet userLocale = app.getLocale();\r\n\tif (!userLocale) {\r\n\t\treturn {\r\n\t\t\tuserLocale: 'en',\r\n\t\t\tosLocale,\r\n\t\t\tresolvedLanguage: 'en',\r\n\t\t\tdefaultMessagesFile: path.join(__dirname, 'nls.messages.json'),\r\n\r\n\t\t\t// NLS: below 2 are a relic from old times only used by vscode-nls and deprecated\r\n\t\t\tlocale: 'en',\r\n\t\t\tavailableLanguages: {}\r\n\t\t};\r\n\t}\r\n\r\n\t// See above the comment about the loader and case sensitiveness\r\n\tuserLocale = processZhLocale(userLocale.toLowerCase());\r\n\r\n\treturn resolveNLSConfiguration({\r\n\t\tuserLocale,\r\n\t\tosLocale,\r\n\t\tcommit: product.commit,\r\n\t\tuserDataPath,\r\n\t\tnlsMetadataPath: __dirname\r\n\t});\r\n}\r\n\r\n/**\r\n * Language tags are case insensitive however an ESM loader is case sensitive\r\n * To make this work on case preserving & insensitive FS we do the following:\r\n * the language bundles have lower case language tags and we always lower case\r\n * the locale we receive from the user or OS.\r\n */\r\nfunction getUserDefinedLocale(argvConfig: IArgvConfig): string | undefined {\r\n\tconst locale = args['locale'];\r\n\tif (locale) {\r\n\t\treturn locale.toLowerCase(); // a directly provided --locale always wins\r\n\t}\r\n\r\n\treturn typeof argvConfig?.locale === 'string' ? argvConfig.locale.toLowerCase() : undefined;\r\n}\r\n\r\n//#endregion\r\n"]}