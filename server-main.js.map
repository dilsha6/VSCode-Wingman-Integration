{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/server-main.ts","server-main.ts"],"names":[],"mappings":"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","file":"server-main.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport './bootstrap-server.js'; // this MUST come before other imports as it changes global state\r\nimport * as path from 'path';\r\nimport * as http from 'http';\r\nimport { AddressInfo } from 'net';\r\nimport * as os from 'os';\r\nimport * as readline from 'readline';\r\nimport { performance } from 'perf_hooks';\r\nimport { fileURLToPath } from 'url';\r\nimport minimist from 'minimist';\r\nimport { devInjectNodeModuleLookupPath, removeGlobalNodeJsModuleLookupPaths } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\r\nimport { product } from './bootstrap-meta.js';\r\nimport * as perf from './vs/base/common/performance.js';\r\nimport { INLSConfiguration } from './vs/nls.js';\r\nimport { IServerAPI } from './vs/server/node/remoteExtensionHostAgentServer.js';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nperf.mark('code/server/start');\r\n(globalThis as any).vscodeServerStartTime = performance.now();\r\n\r\n// Do a quick parse to determine if a server or the cli needs to be started\r\nconst parsedArgs = minimist(process.argv.slice(2), {\r\n\tboolean: ['start-server', 'list-extensions', 'print-ip-address', 'help', 'version', 'accept-server-license-terms', 'update-extensions'],\r\n\tstring: ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'locate-extension', 'socket-path', 'host', 'port', 'compatibility'],\r\n\talias: { help: 'h', version: 'v' }\r\n});\r\n['host', 'port', 'accept-server-license-terms'].forEach(e => {\r\n\tif (!parsedArgs[e]) {\r\n\t\tconst envValue = process.env[`VSCODE_SERVER_${e.toUpperCase().replace('-', '_')}`];\r\n\t\tif (envValue) {\r\n\t\t\tparsedArgs[e] = envValue;\r\n\t\t}\r\n\t}\r\n});\r\n\r\nconst extensionLookupArgs = ['list-extensions', 'locate-extension'];\r\nconst extensionInstallArgs = ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'update-extensions'];\r\n\r\nconst shouldSpawnCli = parsedArgs.help || parsedArgs.version || extensionLookupArgs.some(a => !!parsedArgs[a]) || (extensionInstallArgs.some(a => !!parsedArgs[a]) && !parsedArgs['start-server']);\r\n\r\nconst nlsConfiguration = await resolveNLSConfiguration({ userLocale: 'en', osLocale: 'en', commit: product.commit, userDataPath: '', nlsMetadataPath: __dirname });\r\n\r\nif (shouldSpawnCli) {\r\n\tloadCode(nlsConfiguration).then((mod) => {\r\n\t\tmod.spawnCli();\r\n\t});\r\n} else {\r\n\tlet _remoteExtensionHostAgentServer: IServerAPI | null = null;\r\n\tlet _remoteExtensionHostAgentServerPromise: Promise<IServerAPI> | null = null;\r\n\tconst getRemoteExtensionHostAgentServer = () => {\r\n\t\tif (!_remoteExtensionHostAgentServerPromise) {\r\n\t\t\t_remoteExtensionHostAgentServerPromise = loadCode(nlsConfiguration).then(async (mod) => {\r\n\t\t\t\tconst server = await mod.createServer(address);\r\n\t\t\t\t_remoteExtensionHostAgentServer = server;\r\n\t\t\t\treturn server;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _remoteExtensionHostAgentServerPromise;\r\n\t};\r\n\r\n\tif (Array.isArray(product.serverLicense) && product.serverLicense.length) {\r\n\t\tconsole.log(product.serverLicense.join('\\n'));\r\n\t\tif (product.serverLicensePrompt && parsedArgs['accept-server-license-terms'] !== true) {\r\n\t\t\tif (hasStdinWithoutTty()) {\r\n\t\t\t\tconsole.log('To accept the license terms, start the server with --accept-server-license-terms');\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tconst accept = await prompt(product.serverLicensePrompt);\r\n\t\t\t\tif (!accept) {\r\n\t\t\t\t\tprocess.exit(1);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlet firstRequest = true;\r\n\tlet firstWebSocket = true;\r\n\r\n\tlet address: string | AddressInfo | null = null;\r\n\tconst server = http.createServer(async (req, res) => {\r\n\t\tif (firstRequest) {\r\n\t\t\tfirstRequest = false;\r\n\t\t\tperf.mark('code/server/firstRequest');\r\n\t\t}\r\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\r\n\t\treturn remoteExtensionHostAgentServer.handleRequest(req, res);\r\n\t});\r\n\tserver.on('upgrade', async (req, socket) => {\r\n\t\tif (firstWebSocket) {\r\n\t\t\tfirstWebSocket = false;\r\n\t\t\tperf.mark('code/server/firstWebSocket');\r\n\t\t}\r\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\r\n\t\t// @ts-ignore\r\n\t\treturn remoteExtensionHostAgentServer.handleUpgrade(req, socket);\r\n\t});\r\n\tserver.on('error', async (err) => {\r\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\r\n\t\treturn remoteExtensionHostAgentServer.handleServerError(err);\r\n\t});\r\n\r\n\tconst host = sanitizeStringArg(parsedArgs['host']) || (parsedArgs['compatibility'] !== '1.63' ? 'localhost' : undefined);\r\n\tconst nodeListenOptions = (\r\n\t\tparsedArgs['socket-path']\r\n\t\t\t? { path: sanitizeStringArg(parsedArgs['socket-path']) }\r\n\t\t\t: { host, port: await parsePort(host, sanitizeStringArg(parsedArgs['port'])) }\r\n\t);\r\n\tserver.listen(nodeListenOptions, async () => {\r\n\t\tlet output = Array.isArray(product.serverGreeting) && product.serverGreeting.length ? `\\n\\n${product.serverGreeting.join('\\n')}\\n\\n` : ``;\r\n\r\n\t\tif (typeof nodeListenOptions.port === 'number' && parsedArgs['print-ip-address']) {\r\n\t\t\tconst ifaces = os.networkInterfaces();\r\n\t\t\tObject.keys(ifaces).forEach(function (ifname) {\r\n\t\t\t\tifaces[ifname]?.forEach(function (iface) {\r\n\t\t\t\t\tif (!iface.internal && iface.family === 'IPv4') {\r\n\t\t\t\t\t\toutput += `IP Address: ${iface.address}\\n`;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\taddress = server.address();\r\n\t\tif (address === null) {\r\n\t\t\tthrow new Error('Unexpected server address');\r\n\t\t}\r\n\r\n\t\toutput += `Server bound to ${typeof address === 'string' ? address : `${address.address}:${address.port} (${address.family})`}\\n`;\r\n\t\t// Do not change this line. VS Code looks for this in the output.\r\n\t\toutput += `Extension host agent listening on ${typeof address === 'string' ? address : address.port}\\n`;\r\n\t\tconsole.log(output);\r\n\r\n\t\tperf.mark('code/server/started');\r\n\t\t(globalThis as any).vscodeServerListenTime = performance.now();\r\n\r\n\t\tawait getRemoteExtensionHostAgentServer();\r\n\t});\r\n\r\n\tprocess.on('exit', () => {\r\n\t\tserver.close();\r\n\t\tif (_remoteExtensionHostAgentServer) {\r\n\t\t\t_remoteExtensionHostAgentServer.dispose();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction sanitizeStringArg(val: any): string | undefined {\r\n\tif (Array.isArray(val)) { // if an argument is passed multiple times, minimist creates an array\r\n\t\tval = val.pop(); // take the last item\r\n\t}\r\n\treturn typeof val === 'string' ? val : undefined;\r\n}\r\n\r\n/**\r\n * If `--port` is specified and describes a single port, connect to that port.\r\n *\r\n * If `--port`describes a port range\r\n * then find a free port in that range. Throw error if no\r\n * free port available in range.\r\n *\r\n * In absence of specified ports, connect to port 8000.\r\n */\r\nasync function parsePort(host: string | undefined, strPort: string | undefined): Promise<number> {\r\n\tif (strPort) {\r\n\t\tlet range: { start: number; end: number } | undefined;\r\n\t\tif (strPort.match(/^\\d+$/)) {\r\n\t\t\treturn parseInt(strPort, 10);\r\n\t\t} else if (range = parseRange(strPort)) {\r\n\t\t\tconst port = await findFreePort(host, range.start, range.end);\r\n\t\t\tif (port !== undefined) {\r\n\t\t\t\treturn port;\r\n\t\t\t}\r\n\t\t\t// Remote-SSH extension relies on this exact port error message, treat as an API\r\n\t\t\tconsole.warn(`--port: Could not find free port in range: ${range.start} - ${range.end} (inclusive).`);\r\n\t\t\tprocess.exit(1);\r\n\r\n\t\t} else {\r\n\t\t\tconsole.warn(`--port \"${strPort}\" is not a valid number or range. Ranges must be in the form 'from-to' with 'from' an integer larger than 0 and not larger than 'end'.`);\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t}\r\n\treturn 8000;\r\n}\r\n\r\nfunction parseRange(strRange: string): { start: number; end: number } | undefined {\r\n\tconst match = strRange.match(/^(\\d+)-(\\d+)$/);\r\n\tif (match) {\r\n\t\tconst start = parseInt(match[1], 10), end = parseInt(match[2], 10);\r\n\t\tif (start > 0 && start <= end && end <= 65535) {\r\n\t\t\treturn { start, end };\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * Starting at the `start` port, look for a free port incrementing\r\n * by 1 until `end` inclusive. If no free port is found, undefined is returned.\r\n */\r\nasync function findFreePort(host: string | undefined, start: number, end: number): Promise<number | undefined> {\r\n\tconst testPort = (port: number) => {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tconst server = http.createServer();\r\n\t\t\tserver.listen(port, host, () => {\r\n\t\t\t\tserver.close();\r\n\t\t\t\tresolve(true);\r\n\t\t\t}).on('error', () => {\r\n\t\t\t\tresolve(false);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\tfor (let port = start; port <= end; port++) {\r\n\t\tif (await testPort(port)) {\r\n\t\t\treturn port;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nasync function loadCode(nlsConfiguration: INLSConfiguration) {\r\n\r\n\t// required for `bootstrap-esm` to pick up NLS messages\r\n\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfiguration);\r\n\r\n\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\r\n\t// We would normally install a SIGPIPE listener in bootstrap-node.js\r\n\t// But in certain situations, the console itself can be in a broken pipe state\r\n\t// so logging SIGPIPE to the console will cause an infinite async loop\r\n\tprocess.env['VSCODE_HANDLES_SIGPIPE'] = 'true';\r\n\r\n\tif (process.env['VSCODE_DEV']) {\r\n\t\t// When running out of sources, we need to load node modules from remote/node_modules,\r\n\t\t// which are compiled against nodejs, not electron\r\n\t\tprocess.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] || path.join(__dirname, '..', 'remote', 'node_modules');\r\n\t\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\r\n\t} else {\r\n\t\tdelete process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'];\r\n\t}\r\n\r\n\t// Remove global paths from the node module lookup (node.js only)\r\n\tremoveGlobalNodeJsModuleLookupPaths();\r\n\r\n\t// Bootstrap ESM\r\n\tawait bootstrapESM();\r\n\r\n\t// Load Server\r\n\treturn import('./vs/server/node/server.main.js');\r\n}\r\n\r\nfunction hasStdinWithoutTty(): boolean {\r\n\ttry {\r\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\r\n\t} catch (error) {\r\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction prompt(question: string): Promise<boolean> {\r\n\tconst rl = readline.createInterface({\r\n\t\tinput: process.stdin,\r\n\t\toutput: process.stdout\r\n\t});\r\n\treturn new Promise((resolve, reject) => {\r\n\t\trl.question(question + ' ', async function (data) {\r\n\t\t\trl.close();\r\n\t\t\tconst str = data.toString().trim().toLowerCase();\r\n\t\t\tif (str === '' || str === 'y' || str === 'yes') {\r\n\t\t\t\tresolve(true);\r\n\t\t\t} else if (str === 'n' || str === 'no') {\r\n\t\t\t\tresolve(false);\r\n\t\t\t} else {\r\n\t\t\t\tprocess.stdout.write('\\nInvalid Response. Answer either yes (y, yes) or no (n, no)\\n');\r\n\t\t\t\tresolve(await prompt(question));\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport './bootstrap-server.js'; // this MUST come before other imports as it changes global state\r\nimport * as path from 'path';\r\nimport * as http from 'http';\r\nimport { AddressInfo } from 'net';\r\nimport * as os from 'os';\r\nimport * as readline from 'readline';\r\nimport { performance } from 'perf_hooks';\r\nimport { fileURLToPath } from 'url';\r\nimport minimist from 'minimist';\r\nimport { devInjectNodeModuleLookupPath, removeGlobalNodeJsModuleLookupPaths } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\nimport { resolveNLSConfiguration } from './vs/base/node/nls.js';\r\nimport { product } from './bootstrap-meta.js';\r\nimport * as perf from './vs/base/common/performance.js';\r\nimport { INLSConfiguration } from './vs/nls.js';\r\nimport { IServerAPI } from './vs/server/node/remoteExtensionHostAgentServer.js';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nperf.mark('code/server/start');\r\n(globalThis as any).vscodeServerStartTime = performance.now();\r\n\r\n// Do a quick parse to determine if a server or the cli needs to be started\r\nconst parsedArgs = minimist(process.argv.slice(2), {\r\n\tboolean: ['start-server', 'list-extensions', 'print-ip-address', 'help', 'version', 'accept-server-license-terms', 'update-extensions'],\r\n\tstring: ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'locate-extension', 'socket-path', 'host', 'port', 'compatibility'],\r\n\talias: { help: 'h', version: 'v' }\r\n});\r\n['host', 'port', 'accept-server-license-terms'].forEach(e => {\r\n\tif (!parsedArgs[e]) {\r\n\t\tconst envValue = process.env[`VSCODE_SERVER_${e.toUpperCase().replace('-', '_')}`];\r\n\t\tif (envValue) {\r\n\t\t\tparsedArgs[e] = envValue;\r\n\t\t}\r\n\t}\r\n});\r\n\r\nconst extensionLookupArgs = ['list-extensions', 'locate-extension'];\r\nconst extensionInstallArgs = ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'update-extensions'];\r\n\r\nconst shouldSpawnCli = parsedArgs.help || parsedArgs.version || extensionLookupArgs.some(a => !!parsedArgs[a]) || (extensionInstallArgs.some(a => !!parsedArgs[a]) && !parsedArgs['start-server']);\r\n\r\nconst nlsConfiguration = await resolveNLSConfiguration({ userLocale: 'en', osLocale: 'en', commit: product.commit, userDataPath: '', nlsMetadataPath: __dirname });\r\n\r\nif (shouldSpawnCli) {\r\n\tloadCode(nlsConfiguration).then((mod) => {\r\n\t\tmod.spawnCli();\r\n\t});\r\n} else {\r\n\tlet _remoteExtensionHostAgentServer: IServerAPI | null = null;\r\n\tlet _remoteExtensionHostAgentServerPromise: Promise<IServerAPI> | null = null;\r\n\tconst getRemoteExtensionHostAgentServer = () => {\r\n\t\tif (!_remoteExtensionHostAgentServerPromise) {\r\n\t\t\t_remoteExtensionHostAgentServerPromise = loadCode(nlsConfiguration).then(async (mod) => {\r\n\t\t\t\tconst server = await mod.createServer(address);\r\n\t\t\t\t_remoteExtensionHostAgentServer = server;\r\n\t\t\t\treturn server;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _remoteExtensionHostAgentServerPromise;\r\n\t};\r\n\r\n\tif (Array.isArray(product.serverLicense) && product.serverLicense.length) {\r\n\t\tconsole.log(product.serverLicense.join('\\n'));\r\n\t\tif (product.serverLicensePrompt && parsedArgs['accept-server-license-terms'] !== true) {\r\n\t\t\tif (hasStdinWithoutTty()) {\r\n\t\t\t\tconsole.log('To accept the license terms, start the server with --accept-server-license-terms');\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tconst accept = await prompt(product.serverLicensePrompt);\r\n\t\t\t\tif (!accept) {\r\n\t\t\t\t\tprocess.exit(1);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\tprocess.exit(1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlet firstRequest = true;\r\n\tlet firstWebSocket = true;\r\n\r\n\tlet address: string | AddressInfo | null = null;\r\n\tconst server = http.createServer(async (req, res) => {\r\n\t\tif (firstRequest) {\r\n\t\t\tfirstRequest = false;\r\n\t\t\tperf.mark('code/server/firstRequest');\r\n\t\t}\r\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\r\n\t\treturn remoteExtensionHostAgentServer.handleRequest(req, res);\r\n\t});\r\n\tserver.on('upgrade', async (req, socket) => {\r\n\t\tif (firstWebSocket) {\r\n\t\t\tfirstWebSocket = false;\r\n\t\t\tperf.mark('code/server/firstWebSocket');\r\n\t\t}\r\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\r\n\t\t// @ts-ignore\r\n\t\treturn remoteExtensionHostAgentServer.handleUpgrade(req, socket);\r\n\t});\r\n\tserver.on('error', async (err) => {\r\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\r\n\t\treturn remoteExtensionHostAgentServer.handleServerError(err);\r\n\t});\r\n\r\n\tconst host = sanitizeStringArg(parsedArgs['host']) || (parsedArgs['compatibility'] !== '1.63' ? 'localhost' : undefined);\r\n\tconst nodeListenOptions = (\r\n\t\tparsedArgs['socket-path']\r\n\t\t\t? { path: sanitizeStringArg(parsedArgs['socket-path']) }\r\n\t\t\t: { host, port: await parsePort(host, sanitizeStringArg(parsedArgs['port'])) }\r\n\t);\r\n\tserver.listen(nodeListenOptions, async () => {\r\n\t\tlet output = Array.isArray(product.serverGreeting) && product.serverGreeting.length ? `\\n\\n${product.serverGreeting.join('\\n')}\\n\\n` : ``;\r\n\r\n\t\tif (typeof nodeListenOptions.port === 'number' && parsedArgs['print-ip-address']) {\r\n\t\t\tconst ifaces = os.networkInterfaces();\r\n\t\t\tObject.keys(ifaces).forEach(function (ifname) {\r\n\t\t\t\tifaces[ifname]?.forEach(function (iface) {\r\n\t\t\t\t\tif (!iface.internal && iface.family === 'IPv4') {\r\n\t\t\t\t\t\toutput += `IP Address: ${iface.address}\\n`;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\taddress = server.address();\r\n\t\tif (address === null) {\r\n\t\t\tthrow new Error('Unexpected server address');\r\n\t\t}\r\n\r\n\t\toutput += `Server bound to ${typeof address === 'string' ? address : `${address.address}:${address.port} (${address.family})`}\\n`;\r\n\t\t// Do not change this line. VS Code looks for this in the output.\r\n\t\toutput += `Extension host agent listening on ${typeof address === 'string' ? address : address.port}\\n`;\r\n\t\tconsole.log(output);\r\n\r\n\t\tperf.mark('code/server/started');\r\n\t\t(globalThis as any).vscodeServerListenTime = performance.now();\r\n\r\n\t\tawait getRemoteExtensionHostAgentServer();\r\n\t});\r\n\r\n\tprocess.on('exit', () => {\r\n\t\tserver.close();\r\n\t\tif (_remoteExtensionHostAgentServer) {\r\n\t\t\t_remoteExtensionHostAgentServer.dispose();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction sanitizeStringArg(val: any): string | undefined {\r\n\tif (Array.isArray(val)) { // if an argument is passed multiple times, minimist creates an array\r\n\t\tval = val.pop(); // take the last item\r\n\t}\r\n\treturn typeof val === 'string' ? val : undefined;\r\n}\r\n\r\n/**\r\n * If `--port` is specified and describes a single port, connect to that port.\r\n *\r\n * If `--port`describes a port range\r\n * then find a free port in that range. Throw error if no\r\n * free port available in range.\r\n *\r\n * In absence of specified ports, connect to port 8000.\r\n */\r\nasync function parsePort(host: string | undefined, strPort: string | undefined): Promise<number> {\r\n\tif (strPort) {\r\n\t\tlet range: { start: number; end: number } | undefined;\r\n\t\tif (strPort.match(/^\\d+$/)) {\r\n\t\t\treturn parseInt(strPort, 10);\r\n\t\t} else if (range = parseRange(strPort)) {\r\n\t\t\tconst port = await findFreePort(host, range.start, range.end);\r\n\t\t\tif (port !== undefined) {\r\n\t\t\t\treturn port;\r\n\t\t\t}\r\n\t\t\t// Remote-SSH extension relies on this exact port error message, treat as an API\r\n\t\t\tconsole.warn(`--port: Could not find free port in range: ${range.start} - ${range.end} (inclusive).`);\r\n\t\t\tprocess.exit(1);\r\n\r\n\t\t} else {\r\n\t\t\tconsole.warn(`--port \"${strPort}\" is not a valid number or range. Ranges must be in the form 'from-to' with 'from' an integer larger than 0 and not larger than 'end'.`);\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t}\r\n\treturn 8000;\r\n}\r\n\r\nfunction parseRange(strRange: string): { start: number; end: number } | undefined {\r\n\tconst match = strRange.match(/^(\\d+)-(\\d+)$/);\r\n\tif (match) {\r\n\t\tconst start = parseInt(match[1], 10), end = parseInt(match[2], 10);\r\n\t\tif (start > 0 && start <= end && end <= 65535) {\r\n\t\t\treturn { start, end };\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * Starting at the `start` port, look for a free port incrementing\r\n * by 1 until `end` inclusive. If no free port is found, undefined is returned.\r\n */\r\nasync function findFreePort(host: string | undefined, start: number, end: number): Promise<number | undefined> {\r\n\tconst testPort = (port: number) => {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tconst server = http.createServer();\r\n\t\t\tserver.listen(port, host, () => {\r\n\t\t\t\tserver.close();\r\n\t\t\t\tresolve(true);\r\n\t\t\t}).on('error', () => {\r\n\t\t\t\tresolve(false);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\tfor (let port = start; port <= end; port++) {\r\n\t\tif (await testPort(port)) {\r\n\t\t\treturn port;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nasync function loadCode(nlsConfiguration: INLSConfiguration) {\r\n\r\n\t// required for `bootstrap-esm` to pick up NLS messages\r\n\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfiguration);\r\n\r\n\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\r\n\t// We would normally install a SIGPIPE listener in bootstrap-node.js\r\n\t// But in certain situations, the console itself can be in a broken pipe state\r\n\t// so logging SIGPIPE to the console will cause an infinite async loop\r\n\tprocess.env['VSCODE_HANDLES_SIGPIPE'] = 'true';\r\n\r\n\tif (process.env['VSCODE_DEV']) {\r\n\t\t// When running out of sources, we need to load node modules from remote/node_modules,\r\n\t\t// which are compiled against nodejs, not electron\r\n\t\tprocess.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'] || path.join(__dirname, '..', 'remote', 'node_modules');\r\n\t\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\r\n\t} else {\r\n\t\tdelete process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH'];\r\n\t}\r\n\r\n\t// Remove global paths from the node module lookup (node.js only)\r\n\tremoveGlobalNodeJsModuleLookupPaths();\r\n\r\n\t// Bootstrap ESM\r\n\tawait bootstrapESM();\r\n\r\n\t// Load Server\r\n\treturn import('./vs/server/node/server.main.js');\r\n}\r\n\r\nfunction hasStdinWithoutTty(): boolean {\r\n\ttry {\r\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\r\n\t} catch (error) {\r\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction prompt(question: string): Promise<boolean> {\r\n\tconst rl = readline.createInterface({\r\n\t\tinput: process.stdin,\r\n\t\toutput: process.stdout\r\n\t});\r\n\treturn new Promise((resolve, reject) => {\r\n\t\trl.question(question + ' ', async function (data) {\r\n\t\t\trl.close();\r\n\t\t\tconst str = data.toString().trim().toLowerCase();\r\n\t\t\tif (str === '' || str === 'y' || str === 'yes') {\r\n\t\t\t\tresolve(true);\r\n\t\t\t} else if (str === 'n' || str === 'no') {\r\n\t\t\t\tresolve(false);\r\n\t\t\t} else {\r\n\t\t\t\tprocess.stdout.write('\\nInvalid Response. Answer either yes (y, yes) or no (n, no)\\n');\r\n\t\t\t\tresolve(await prompt(question));\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n"]}