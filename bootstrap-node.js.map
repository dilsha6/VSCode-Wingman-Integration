{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/bootstrap-node.ts","bootstrap-node.ts"],"names":[],"mappings":"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","file":"bootstrap-node.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { fileURLToPath } from 'url';\r\nimport { createRequire } from 'node:module';\r\nimport type { IProductConfiguration } from './vs/base/common/product.js';\r\n\r\nconst require = createRequire(import.meta.url);\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\nconst isWindows = process.platform === 'win32';\r\n\r\n// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\r\nError.stackTraceLimit = 100;\r\n\r\nif (!process.env['VSCODE_HANDLES_SIGPIPE']) {\r\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\r\n\t// (https://github.com/electron/electron/issues/13254)\r\n\tlet didLogAboutSIGPIPE = false;\r\n\tprocess.on('SIGPIPE', () => {\r\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\r\n\t\t// In certain situations, the console itself can be in a broken pipe state\r\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\r\n\t\tif (!didLogAboutSIGPIPE) {\r\n\t\t\tdidLogAboutSIGPIPE = true;\r\n\t\t\tconsole.error(new Error(`Unexpected SIGPIPE`));\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Setup current working directory in all our node & electron processes\r\n// - Windows: call `process.chdir()` to always set application folder as cwd\r\n// -  all OS: store the `process.cwd()` inside `VSCODE_CWD` for consistent lookups\r\nfunction setupCurrentWorkingDirectory(): void {\r\n\ttry {\r\n\r\n\t\t// Store the `process.cwd()` inside `VSCODE_CWD`\r\n\t\t// for consistent lookups, but make sure to only\r\n\t\t// do this once unless defined already from e.g.\r\n\t\t// a parent process.\r\n\t\tif (typeof process.env['VSCODE_CWD'] !== 'string') {\r\n\t\t\tprocess.env['VSCODE_CWD'] = process.cwd();\r\n\t\t}\r\n\r\n\t\t// Windows: always set application folder as current working dir\r\n\t\tif (process.platform === 'win32') {\r\n\t\t\tprocess.chdir(path.dirname(process.execPath));\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.error(err);\r\n\t}\r\n}\r\n\r\nsetupCurrentWorkingDirectory();\r\n\r\n/**\r\n * Add support for redirecting the loading of node modules\r\n *\r\n * Note: only applies when running out of sources.\r\n */\r\nexport function devInjectNodeModuleLookupPath(injectPath: string): void {\r\n\tif (!process.env['VSCODE_DEV']) {\r\n\t\treturn; // only applies running out of sources\r\n\t}\r\n\r\n\tif (!injectPath) {\r\n\t\tthrow new Error('Missing injectPath');\r\n\t}\r\n\r\n\t// register a loader hook\r\n\tconst Module = require('node:module');\r\n\tModule.register('./bootstrap-import.js', { parentURL: import.meta.url, data: injectPath });\r\n}\r\n\r\nexport function removeGlobalNodeJsModuleLookupPaths(): void {\r\n\tif (typeof process?.versions?.electron === 'string') {\r\n\t\treturn; // Electron disables global search paths in https://github.com/electron/electron/blob/3186c2f0efa92d275dc3d57b5a14a60ed3846b0e/shell/common/node_bindings.cc#L653\r\n\t}\r\n\r\n\tconst Module = require('module');\r\n\tconst globalPaths = Module.globalPaths;\r\n\r\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\r\n\r\n\tModule._resolveLookupPaths = function (moduleName: string, parent: any): string[] {\r\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\r\n\t\tif (Array.isArray(paths)) {\r\n\t\t\tlet commonSuffixLength = 0;\r\n\t\t\twhile (commonSuffixLength < paths.length && paths[paths.length - 1 - commonSuffixLength] === globalPaths[globalPaths.length - 1 - commonSuffixLength]) {\r\n\t\t\t\tcommonSuffixLength++;\r\n\t\t\t}\r\n\r\n\t\t\treturn paths.slice(0, paths.length - commonSuffixLength);\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\t};\r\n\r\n\tconst originalNodeModulePaths = Module._nodeModulePaths;\r\n\tModule._nodeModulePaths = function (from: string): string[] {\r\n\t\tlet paths: string[] = originalNodeModulePaths(from);\r\n\t\tif (!isWindows) {\r\n\t\t\treturn paths;\r\n\t\t}\r\n\r\n\t\t// On Windows, remove drive(s) and users' home directory from search paths,\r\n\t\t// UNLESS 'from' is explicitly set to one of those.\r\n\t\tconst isDrive = (p: string) => p.length >= 3 && p.endsWith(':\\\\');\r\n\r\n\t\tif (!isDrive(from)) {\r\n\t\t\tpaths = paths.filter(p => !isDrive(path.dirname(p)));\r\n\t\t}\r\n\r\n\t\tif (process.env.HOMEDRIVE && process.env.HOMEPATH) {\r\n\t\t\tconst userDir = path.dirname(path.join(process.env.HOMEDRIVE, process.env.HOMEPATH));\r\n\r\n\t\t\tconst isUsersDir = (p: string) => path.relative(p, userDir).length === 0;\r\n\r\n\t\t\t// Check if 'from' is the same as 'userDir'\r\n\t\t\tif (!isUsersDir(from)) {\r\n\t\t\t\tpaths = paths.filter(p => !isUsersDir(path.dirname(p)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\t};\r\n}\r\n\r\n/**\r\n * Helper to enable portable mode.\r\n */\r\nexport function configurePortable(product: Partial<IProductConfiguration>): { portableDataPath: string; isPortable: boolean } {\r\n\tconst appRoot = path.dirname(__dirname);\r\n\r\n\tfunction getApplicationPath(): string {\r\n\t\tif (process.env['VSCODE_DEV']) {\r\n\t\t\treturn appRoot;\r\n\t\t}\r\n\r\n\t\tif (process.platform === 'darwin') {\r\n\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\r\n\t\t}\r\n\r\n\t\treturn path.dirname(path.dirname(appRoot));\r\n\t}\r\n\r\n\tfunction getPortableDataPath(): string {\r\n\t\tif (process.env['VSCODE_PORTABLE']) {\r\n\t\t\treturn process.env['VSCODE_PORTABLE'];\r\n\t\t}\r\n\r\n\t\tif (process.platform === 'win32' || process.platform === 'linux') {\r\n\t\t\treturn path.join(getApplicationPath(), 'data');\r\n\t\t}\r\n\r\n\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\r\n\t\treturn path.join(path.dirname(getApplicationPath()), portableDataName);\r\n\t}\r\n\r\n\tconst portableDataPath = getPortableDataPath();\r\n\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\r\n\tconst portableTempPath = path.join(portableDataPath, 'tmp');\r\n\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\r\n\r\n\tif (isPortable) {\r\n\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\r\n\t} else {\r\n\t\tdelete process.env['VSCODE_PORTABLE'];\r\n\t}\r\n\r\n\tif (isTempPortable) {\r\n\t\tif (process.platform === 'win32') {\r\n\t\t\tprocess.env['TMP'] = portableTempPath;\r\n\t\t\tprocess.env['TEMP'] = portableTempPath;\r\n\t\t} else {\r\n\t\t\tprocess.env['TMPDIR'] = portableTempPath;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tportableDataPath,\r\n\t\tisPortable\r\n\t};\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { fileURLToPath } from 'url';\r\nimport { createRequire } from 'node:module';\r\nimport type { IProductConfiguration } from './vs/base/common/product.js';\r\n\r\nconst require = createRequire(import.meta.url);\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\nconst isWindows = process.platform === 'win32';\r\n\r\n// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\r\nError.stackTraceLimit = 100;\r\n\r\nif (!process.env['VSCODE_HANDLES_SIGPIPE']) {\r\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\r\n\t// (https://github.com/electron/electron/issues/13254)\r\n\tlet didLogAboutSIGPIPE = false;\r\n\tprocess.on('SIGPIPE', () => {\r\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\r\n\t\t// In certain situations, the console itself can be in a broken pipe state\r\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\r\n\t\tif (!didLogAboutSIGPIPE) {\r\n\t\t\tdidLogAboutSIGPIPE = true;\r\n\t\t\tconsole.error(new Error(`Unexpected SIGPIPE`));\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Setup current working directory in all our node & electron processes\r\n// - Windows: call `process.chdir()` to always set application folder as cwd\r\n// -  all OS: store the `process.cwd()` inside `VSCODE_CWD` for consistent lookups\r\nfunction setupCurrentWorkingDirectory(): void {\r\n\ttry {\r\n\r\n\t\t// Store the `process.cwd()` inside `VSCODE_CWD`\r\n\t\t// for consistent lookups, but make sure to only\r\n\t\t// do this once unless defined already from e.g.\r\n\t\t// a parent process.\r\n\t\tif (typeof process.env['VSCODE_CWD'] !== 'string') {\r\n\t\t\tprocess.env['VSCODE_CWD'] = process.cwd();\r\n\t\t}\r\n\r\n\t\t// Windows: always set application folder as current working dir\r\n\t\tif (process.platform === 'win32') {\r\n\t\t\tprocess.chdir(path.dirname(process.execPath));\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.error(err);\r\n\t}\r\n}\r\n\r\nsetupCurrentWorkingDirectory();\r\n\r\n/**\r\n * Add support for redirecting the loading of node modules\r\n *\r\n * Note: only applies when running out of sources.\r\n */\r\nexport function devInjectNodeModuleLookupPath(injectPath: string): void {\r\n\tif (!process.env['VSCODE_DEV']) {\r\n\t\treturn; // only applies running out of sources\r\n\t}\r\n\r\n\tif (!injectPath) {\r\n\t\tthrow new Error('Missing injectPath');\r\n\t}\r\n\r\n\t// register a loader hook\r\n\tconst Module = require('node:module');\r\n\tModule.register('./bootstrap-import.js', { parentURL: import.meta.url, data: injectPath });\r\n}\r\n\r\nexport function removeGlobalNodeJsModuleLookupPaths(): void {\r\n\tif (typeof process?.versions?.electron === 'string') {\r\n\t\treturn; // Electron disables global search paths in https://github.com/electron/electron/blob/3186c2f0efa92d275dc3d57b5a14a60ed3846b0e/shell/common/node_bindings.cc#L653\r\n\t}\r\n\r\n\tconst Module = require('module');\r\n\tconst globalPaths = Module.globalPaths;\r\n\r\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\r\n\r\n\tModule._resolveLookupPaths = function (moduleName: string, parent: any): string[] {\r\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\r\n\t\tif (Array.isArray(paths)) {\r\n\t\t\tlet commonSuffixLength = 0;\r\n\t\t\twhile (commonSuffixLength < paths.length && paths[paths.length - 1 - commonSuffixLength] === globalPaths[globalPaths.length - 1 - commonSuffixLength]) {\r\n\t\t\t\tcommonSuffixLength++;\r\n\t\t\t}\r\n\r\n\t\t\treturn paths.slice(0, paths.length - commonSuffixLength);\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\t};\r\n\r\n\tconst originalNodeModulePaths = Module._nodeModulePaths;\r\n\tModule._nodeModulePaths = function (from: string): string[] {\r\n\t\tlet paths: string[] = originalNodeModulePaths(from);\r\n\t\tif (!isWindows) {\r\n\t\t\treturn paths;\r\n\t\t}\r\n\r\n\t\t// On Windows, remove drive(s) and users' home directory from search paths,\r\n\t\t// UNLESS 'from' is explicitly set to one of those.\r\n\t\tconst isDrive = (p: string) => p.length >= 3 && p.endsWith(':\\\\');\r\n\r\n\t\tif (!isDrive(from)) {\r\n\t\t\tpaths = paths.filter(p => !isDrive(path.dirname(p)));\r\n\t\t}\r\n\r\n\t\tif (process.env.HOMEDRIVE && process.env.HOMEPATH) {\r\n\t\t\tconst userDir = path.dirname(path.join(process.env.HOMEDRIVE, process.env.HOMEPATH));\r\n\r\n\t\t\tconst isUsersDir = (p: string) => path.relative(p, userDir).length === 0;\r\n\r\n\t\t\t// Check if 'from' is the same as 'userDir'\r\n\t\t\tif (!isUsersDir(from)) {\r\n\t\t\t\tpaths = paths.filter(p => !isUsersDir(path.dirname(p)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\t};\r\n}\r\n\r\n/**\r\n * Helper to enable portable mode.\r\n */\r\nexport function configurePortable(product: Partial<IProductConfiguration>): { portableDataPath: string; isPortable: boolean } {\r\n\tconst appRoot = path.dirname(__dirname);\r\n\r\n\tfunction getApplicationPath(): string {\r\n\t\tif (process.env['VSCODE_DEV']) {\r\n\t\t\treturn appRoot;\r\n\t\t}\r\n\r\n\t\tif (process.platform === 'darwin') {\r\n\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\r\n\t\t}\r\n\r\n\t\treturn path.dirname(path.dirname(appRoot));\r\n\t}\r\n\r\n\tfunction getPortableDataPath(): string {\r\n\t\tif (process.env['VSCODE_PORTABLE']) {\r\n\t\t\treturn process.env['VSCODE_PORTABLE'];\r\n\t\t}\r\n\r\n\t\tif (process.platform === 'win32' || process.platform === 'linux') {\r\n\t\t\treturn path.join(getApplicationPath(), 'data');\r\n\t\t}\r\n\r\n\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\r\n\t\treturn path.join(path.dirname(getApplicationPath()), portableDataName);\r\n\t}\r\n\r\n\tconst portableDataPath = getPortableDataPath();\r\n\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\r\n\tconst portableTempPath = path.join(portableDataPath, 'tmp');\r\n\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\r\n\r\n\tif (isPortable) {\r\n\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\r\n\t} else {\r\n\t\tdelete process.env['VSCODE_PORTABLE'];\r\n\t}\r\n\r\n\tif (isTempPortable) {\r\n\t\tif (process.platform === 'win32') {\r\n\t\t\tprocess.env['TMP'] = portableTempPath;\r\n\t\t\tprocess.env['TEMP'] = portableTempPath;\r\n\t\t} else {\r\n\t\t\tprocess.env['TMPDIR'] = portableTempPath;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tportableDataPath,\r\n\t\tisPortable\r\n\t};\r\n}\r\n"]}