{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/bootstrap-fork.ts","bootstrap-fork.ts"],"names":[],"mappings":"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","file":"bootstrap-fork.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as performance from './vs/base/common/performance.js';\r\nimport { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\n\r\nperformance.mark('code/fork/start');\r\n\r\n//#region Helpers\r\n\r\nfunction pipeLoggingToParent(): void {\r\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\r\n\tconst MAX_LENGTH = 100000;\r\n\r\n\t/**\r\n\t * Prevent circular stringify and convert arguments to real array\r\n\t */\r\n\tfunction safeToString(args: ArrayLike<unknown>): string {\r\n\t\tconst seen: unknown[] = [];\r\n\t\tconst argsArray: unknown[] = [];\r\n\r\n\t\t// Massage some arguments with special treatment\r\n\t\tif (args.length) {\r\n\t\t\tfor (let i = 0; i < args.length; i++) {\r\n\t\t\t\tlet arg = args[i];\r\n\r\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\r\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\r\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\r\n\t\t\t\tif (typeof arg === 'undefined') {\r\n\t\t\t\t\targ = 'undefined';\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\r\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\r\n\t\t\t\telse if (arg instanceof Error) {\r\n\t\t\t\t\tconst errorObj = arg;\r\n\t\t\t\t\tif (errorObj.stack) {\r\n\t\t\t\t\t\targ = errorObj.stack;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\targ = errorObj.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\targsArray.push(arg);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value: unknown) {\r\n\r\n\t\t\t\t// Objects get special treatment to prevent circles\r\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\r\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\r\n\t\t\t\t\t\treturn '[Circular]';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tseen.push(value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\r\n\t\t\tif (res.length > MAX_LENGTH) {\r\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\r\n\t\t\t}\r\n\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction safeSend(arg: { type: string; severity: string; arguments: string }): void {\r\n\t\ttry {\r\n\t\t\tif (process.send) {\r\n\t\t\t\tprocess.send(arg);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// Can happen if the parent channel is closed meanwhile\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isObject(obj: unknown): boolean {\r\n\t\treturn typeof obj === 'object'\r\n\t\t\t&& obj !== null\r\n\t\t\t&& !Array.isArray(obj)\r\n\t\t\t&& !(obj instanceof RegExp)\r\n\t\t\t&& !(obj instanceof Date);\r\n\t}\r\n\r\n\tfunction safeSendConsoleMessage(severity: 'log' | 'warn' | 'error', args: string): void {\r\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps a console message so that it is transmitted to the renderer.\r\n\t *\r\n\t * The wrapped property is not defined with `writable: false` to avoid\r\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\r\n\t */\r\n\tfunction wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error'): void {\r\n\t\tObject.defineProperty(console, method, {\r\n\t\t\tset: () => { },\r\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToString(arguments)); },\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\r\n\t * renderer or CLI. It both calls through to the original method as well\r\n\t * as to console.log with complete lines so that they're made available\r\n\t * to the debugger/CLI.\r\n\t */\r\n\tfunction wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error'): void {\r\n\t\tconst stream = process[streamName];\r\n\t\tconst original = stream.write;\r\n\r\n\t\tlet buf = '';\r\n\r\n\t\tObject.defineProperty(stream, 'write', {\r\n\t\t\tset: () => { },\r\n\t\t\tget: () => (chunk: string | Buffer | Uint8Array, encoding: BufferEncoding | undefined, callback: ((err?: Error | null | undefined) => void) | undefined) => {\r\n\t\t\t\tbuf += chunk.toString(encoding);\r\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\r\n\t\t\t\tif (eol !== -1) {\r\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\r\n\t\t\t\t\tbuf = buf.slice(eol + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t// Pass console logging to the outside so that we have it in the main side if told so\r\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\r\n\t\twrapConsoleMethod('info', 'log');\r\n\t\twrapConsoleMethod('log', 'log');\r\n\t\twrapConsoleMethod('warn', 'warn');\r\n\t\twrapConsoleMethod('error', 'error');\r\n\t} else {\r\n\t\tconsole.log = function () { /* ignore */ };\r\n\t\tconsole.warn = function () { /* ignore */ };\r\n\t\tconsole.info = function () { /* ignore */ };\r\n\t\twrapConsoleMethod('error', 'error');\r\n\t}\r\n\r\n\twrapStream('stderr', 'error');\r\n\twrapStream('stdout', 'log');\r\n}\r\n\r\nfunction handleExceptions(): void {\r\n\r\n\t// Handle uncaught exceptions\r\n\tprocess.on('uncaughtException', function (err) {\r\n\t\tconsole.error('Uncaught Exception: ', err);\r\n\t});\r\n\r\n\t// Handle unhandled promise rejections\r\n\tprocess.on('unhandledRejection', function (reason) {\r\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\r\n\t});\r\n}\r\n\r\nfunction terminateWhenParentTerminates(): void {\r\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\r\n\r\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\r\n\t\tsetInterval(function () {\r\n\t\t\ttry {\r\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\r\n\t\t\t} catch (e) {\r\n\t\t\t\tprocess.exit();\r\n\t\t\t}\r\n\t\t}, 5000);\r\n\t}\r\n}\r\n\r\nfunction configureCrashReporter(): void {\r\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\r\n\tif (crashReporterProcessType) {\r\n\t\ttry {\r\n\t\t\t//@ts-ignore\r\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//#endregion\r\n\r\n// Crash reporter\r\nconfigureCrashReporter();\r\n\r\n// Remove global paths from the node module lookup (node.js only)\r\nremoveGlobalNodeJsModuleLookupPaths();\r\n\r\nif (process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']) {\r\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\r\n}\r\n\r\n// Configure: pipe logging to parent process\r\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\r\n\tpipeLoggingToParent();\r\n}\r\n\r\n// Handle Exceptions\r\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\r\n\thandleExceptions();\r\n}\r\n\r\n// Terminate when parent terminates\r\nif (process.env['VSCODE_PARENT_PID']) {\r\n\tterminateWhenParentTerminates();\r\n}\r\n\r\n// Bootstrap ESM\r\nawait bootstrapESM();\r\n\r\n// Load ESM entry point\r\nawait import([`./${process.env['VSCODE_ESM_ENTRYPOINT']}.js`].join('/') /* workaround: esbuild prints some strange warnings when trying to inline? */);\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as performance from './vs/base/common/performance.js';\r\nimport { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from './bootstrap-node.js';\r\nimport { bootstrapESM } from './bootstrap-esm.js';\r\n\r\nperformance.mark('code/fork/start');\r\n\r\n//#region Helpers\r\n\r\nfunction pipeLoggingToParent(): void {\r\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\r\n\tconst MAX_LENGTH = 100000;\r\n\r\n\t/**\r\n\t * Prevent circular stringify and convert arguments to real array\r\n\t */\r\n\tfunction safeToString(args: ArrayLike<unknown>): string {\r\n\t\tconst seen: unknown[] = [];\r\n\t\tconst argsArray: unknown[] = [];\r\n\r\n\t\t// Massage some arguments with special treatment\r\n\t\tif (args.length) {\r\n\t\t\tfor (let i = 0; i < args.length; i++) {\r\n\t\t\t\tlet arg = args[i];\r\n\r\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\r\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\r\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\r\n\t\t\t\tif (typeof arg === 'undefined') {\r\n\t\t\t\t\targ = 'undefined';\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\r\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\r\n\t\t\t\telse if (arg instanceof Error) {\r\n\t\t\t\t\tconst errorObj = arg;\r\n\t\t\t\t\tif (errorObj.stack) {\r\n\t\t\t\t\t\targ = errorObj.stack;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\targ = errorObj.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\targsArray.push(arg);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value: unknown) {\r\n\r\n\t\t\t\t// Objects get special treatment to prevent circles\r\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\r\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\r\n\t\t\t\t\t\treturn '[Circular]';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tseen.push(value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\r\n\t\t\tif (res.length > MAX_LENGTH) {\r\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\r\n\t\t\t}\r\n\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction safeSend(arg: { type: string; severity: string; arguments: string }): void {\r\n\t\ttry {\r\n\t\t\tif (process.send) {\r\n\t\t\t\tprocess.send(arg);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// Can happen if the parent channel is closed meanwhile\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isObject(obj: unknown): boolean {\r\n\t\treturn typeof obj === 'object'\r\n\t\t\t&& obj !== null\r\n\t\t\t&& !Array.isArray(obj)\r\n\t\t\t&& !(obj instanceof RegExp)\r\n\t\t\t&& !(obj instanceof Date);\r\n\t}\r\n\r\n\tfunction safeSendConsoleMessage(severity: 'log' | 'warn' | 'error', args: string): void {\r\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps a console message so that it is transmitted to the renderer.\r\n\t *\r\n\t * The wrapped property is not defined with `writable: false` to avoid\r\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\r\n\t */\r\n\tfunction wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error'): void {\r\n\t\tObject.defineProperty(console, method, {\r\n\t\t\tset: () => { },\r\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToString(arguments)); },\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\r\n\t * renderer or CLI. It both calls through to the original method as well\r\n\t * as to console.log with complete lines so that they're made available\r\n\t * to the debugger/CLI.\r\n\t */\r\n\tfunction wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error'): void {\r\n\t\tconst stream = process[streamName];\r\n\t\tconst original = stream.write;\r\n\r\n\t\tlet buf = '';\r\n\r\n\t\tObject.defineProperty(stream, 'write', {\r\n\t\t\tset: () => { },\r\n\t\t\tget: () => (chunk: string | Buffer | Uint8Array, encoding: BufferEncoding | undefined, callback: ((err?: Error | null | undefined) => void) | undefined) => {\r\n\t\t\t\tbuf += chunk.toString(encoding);\r\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\r\n\t\t\t\tif (eol !== -1) {\r\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\r\n\t\t\t\t\tbuf = buf.slice(eol + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t// Pass console logging to the outside so that we have it in the main side if told so\r\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\r\n\t\twrapConsoleMethod('info', 'log');\r\n\t\twrapConsoleMethod('log', 'log');\r\n\t\twrapConsoleMethod('warn', 'warn');\r\n\t\twrapConsoleMethod('error', 'error');\r\n\t} else {\r\n\t\tconsole.log = function () { /* ignore */ };\r\n\t\tconsole.warn = function () { /* ignore */ };\r\n\t\tconsole.info = function () { /* ignore */ };\r\n\t\twrapConsoleMethod('error', 'error');\r\n\t}\r\n\r\n\twrapStream('stderr', 'error');\r\n\twrapStream('stdout', 'log');\r\n}\r\n\r\nfunction handleExceptions(): void {\r\n\r\n\t// Handle uncaught exceptions\r\n\tprocess.on('uncaughtException', function (err) {\r\n\t\tconsole.error('Uncaught Exception: ', err);\r\n\t});\r\n\r\n\t// Handle unhandled promise rejections\r\n\tprocess.on('unhandledRejection', function (reason) {\r\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\r\n\t});\r\n}\r\n\r\nfunction terminateWhenParentTerminates(): void {\r\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\r\n\r\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\r\n\t\tsetInterval(function () {\r\n\t\t\ttry {\r\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\r\n\t\t\t} catch (e) {\r\n\t\t\t\tprocess.exit();\r\n\t\t\t}\r\n\t\t}, 5000);\r\n\t}\r\n}\r\n\r\nfunction configureCrashReporter(): void {\r\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\r\n\tif (crashReporterProcessType) {\r\n\t\ttry {\r\n\t\t\t//@ts-ignore\r\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//#endregion\r\n\r\n// Crash reporter\r\nconfigureCrashReporter();\r\n\r\n// Remove global paths from the node module lookup (node.js only)\r\nremoveGlobalNodeJsModuleLookupPaths();\r\n\r\nif (process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']) {\r\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\r\n}\r\n\r\n// Configure: pipe logging to parent process\r\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\r\n\tpipeLoggingToParent();\r\n}\r\n\r\n// Handle Exceptions\r\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\r\n\thandleExceptions();\r\n}\r\n\r\n// Terminate when parent terminates\r\nif (process.env['VSCODE_PARENT_PID']) {\r\n\tterminateWhenParentTerminates();\r\n}\r\n\r\n// Bootstrap ESM\r\nawait bootstrapESM();\r\n\r\n// Load ESM entry point\r\nawait import([`./${process.env['VSCODE_ESM_ENTRYPOINT']}.js`].join('/') /* workaround: esbuild prints some strange warnings when trying to inline? */);\r\n"]}