{"version":3,"sources":["file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src/bootstrap-import.ts","bootstrap-import.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,wEAAwE;AACxE,wEAAwE;AACxE,wEAAwE;AACxE,uEAAuE;AACvE,wEAAwE;AACxE,wEAAwE;AAExE,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AACnC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAEjC,gEAAgE;AAEhE,MAAM,eAAe,GAA2B,EAAE,CAAC;AAEnD,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,UAAkB;IAClD,oBAAoB;IAEpB,MAAM,qBAAqB,GAAG,aAAa,CAAC,IAAI,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACnG,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAEvF,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC;QAC/D,IAAI,CAAC;YACJ,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE,mBAAmB,IAAI,eAAe,CAAC,CAAC;YACjF,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEjE,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,IAAI,GAAG,UAAU,CAAC;YACnB,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC3B,IAAI,IAAI,KAAK,CAAC;YACf,CAAC;YACD,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,EAAE,mBAAmB,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;YAChF,eAAe,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;QAEtD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;IACF,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,+DAA+D,UAAU,EAAE,CAAC,CAAC;AAC1F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,SAA0B,EAAE,OAAY,EAAE,WAA0C;IAEjH,MAAM,YAAY,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;IAChD,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;QAChC,OAAO;YACN,MAAM,EAAE,UAAU;YAClB,YAAY,EAAE,IAAI;YAClB,GAAG,EAAE,YAAY;SACjB,CAAC;IACH,CAAC;IAED,0DAA0D;IAC1D,qEAAqE;IACrE,OAAO,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC","file":"bootstrap-import.js","sourceRoot":"file:///C:/Users/dilsh/custom-vscode-wingman/vscode/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n// *********************************************************************\r\n// *                                                                   *\r\n// *  We need this to redirect to node_modules from the remote-folder. *\r\n// *  This ONLY applies when running out of source.                   *\r\n// *                                                                   *\r\n// *********************************************************************\r\n\r\nimport { fileURLToPath, pathToFileURL } from 'node:url';\r\nimport { promises } from 'node:fs';\r\nimport { join } from 'node:path';\r\n\r\n// SEE https://nodejs.org/docs/latest/api/module.html#initialize\r\n\r\nconst _specifierToUrl: Record<string, string> = {};\r\n\r\nexport async function initialize(injectPath: string): Promise<void> {\r\n\t// populate mappings\r\n\r\n\tconst injectPackageJSONPath = fileURLToPath(new URL('../package.json', pathToFileURL(injectPath)));\r\n\tconst packageJSON = JSON.parse(String(await promises.readFile(injectPackageJSONPath)));\r\n\r\n\tfor (const [name] of Object.entries(packageJSON.dependencies)) {\r\n\t\ttry {\r\n\t\t\tconst path = join(injectPackageJSONPath, `../node_modules/${name}/package.json`);\r\n\t\t\tlet { main } = JSON.parse(String(await promises.readFile(path)));\r\n\r\n\t\t\tif (!main) {\r\n\t\t\t\tmain = 'index.js';\r\n\t\t\t}\r\n\t\t\tif (!main.endsWith('.js')) {\r\n\t\t\t\tmain += '.js';\r\n\t\t\t}\r\n\t\t\tconst mainPath = join(injectPackageJSONPath, `../node_modules/${name}/${main}`);\r\n\t\t\t_specifierToUrl[name] = pathToFileURL(mainPath).href;\r\n\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(name);\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`);\r\n}\r\n\r\nexport async function resolve(specifier: string | number, context: any, nextResolve: (arg0: any, arg1: any) => any) {\r\n\r\n\tconst newSpecifier = _specifierToUrl[specifier];\r\n\tif (newSpecifier !== undefined) {\r\n\t\treturn {\r\n\t\t\tformat: 'commonjs',\r\n\t\t\tshortCircuit: true,\r\n\t\t\turl: newSpecifier\r\n\t\t};\r\n\t}\r\n\r\n\t// Defer to the next hook in the chain, which would be the\r\n\t// Node.js default resolve if this is the last user-specified loader.\r\n\treturn nextResolve(specifier, context);\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n// *********************************************************************\r\n// *                                                                   *\r\n// *  We need this to redirect to node_modules from the remote-folder. *\r\n// *  This ONLY applies when running out of source.                   *\r\n// *                                                                   *\r\n// *********************************************************************\r\n\r\nimport { fileURLToPath, pathToFileURL } from 'node:url';\r\nimport { promises } from 'node:fs';\r\nimport { join } from 'node:path';\r\n\r\n// SEE https://nodejs.org/docs/latest/api/module.html#initialize\r\n\r\nconst _specifierToUrl: Record<string, string> = {};\r\n\r\nexport async function initialize(injectPath: string): Promise<void> {\r\n\t// populate mappings\r\n\r\n\tconst injectPackageJSONPath = fileURLToPath(new URL('../package.json', pathToFileURL(injectPath)));\r\n\tconst packageJSON = JSON.parse(String(await promises.readFile(injectPackageJSONPath)));\r\n\r\n\tfor (const [name] of Object.entries(packageJSON.dependencies)) {\r\n\t\ttry {\r\n\t\t\tconst path = join(injectPackageJSONPath, `../node_modules/${name}/package.json`);\r\n\t\t\tlet { main } = JSON.parse(String(await promises.readFile(path)));\r\n\r\n\t\t\tif (!main) {\r\n\t\t\t\tmain = 'index.js';\r\n\t\t\t}\r\n\t\t\tif (!main.endsWith('.js')) {\r\n\t\t\t\tmain += '.js';\r\n\t\t\t}\r\n\t\t\tconst mainPath = join(injectPackageJSONPath, `../node_modules/${name}/${main}`);\r\n\t\t\t_specifierToUrl[name] = pathToFileURL(mainPath).href;\r\n\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(name);\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`);\r\n}\r\n\r\nexport async function resolve(specifier: string | number, context: any, nextResolve: (arg0: any, arg1: any) => any) {\r\n\r\n\tconst newSpecifier = _specifierToUrl[specifier];\r\n\tif (newSpecifier !== undefined) {\r\n\t\treturn {\r\n\t\t\tformat: 'commonjs',\r\n\t\t\tshortCircuit: true,\r\n\t\t\turl: newSpecifier\r\n\t\t};\r\n\t}\r\n\r\n\t// Defer to the next hook in the chain, which would be the\r\n\t// Node.js default resolve if this is the last user-specified loader.\r\n\treturn nextResolve(specifier, context);\r\n}\r\n"]}